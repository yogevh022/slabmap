<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="688"><g><title>`0x7FF8291FCC70 (2 samples, 0.29%)</title><rect x="0.0000%" y="565" width="0.2907%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="575.50"></text></g><g><title>`0x7FF8291E26C6 (1 samples, 0.15%)</title><rect x="0.2907%" y="469" width="0.1453%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.5407%" y="479.50"></text></g><g><title>`0x7FF829210128 (2 samples, 0.29%)</title><rect x="0.2907%" y="485" width="0.2907%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="2"/><text x="0.5407%" y="495.50"></text></g><g><title>`0x7FF8291E288A (1 samples, 0.15%)</title><rect x="0.4360%" y="469" width="0.1453%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="0.6860%" y="479.50"></text></g><g><title>`0x7FF829204518 (1 samples, 0.15%)</title><rect x="0.4360%" y="453" width="0.1453%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="0.6860%" y="463.50"></text></g><g><title>`0x7FF82924DEF4 (1 samples, 0.15%)</title><rect x="0.4360%" y="437" width="0.1453%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="0.6860%" y="447.50"></text></g><g><title>`0x7FF829210BD6 (1 samples, 0.15%)</title><rect x="0.5814%" y="469" width="0.1453%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="1"/><text x="0.8314%" y="479.50"></text></g><g><title>`0x7FF829210516 (1 samples, 0.15%)</title><rect x="0.5814%" y="453" width="0.1453%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="1"/><text x="0.8314%" y="463.50"></text></g><g><title>`0x7FF8292106F7 (1 samples, 0.15%)</title><rect x="0.5814%" y="437" width="0.1453%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="1"/><text x="0.8314%" y="447.50"></text></g><g><title>`0x7FF82921086B (1 samples, 0.15%)</title><rect x="0.5814%" y="421" width="0.1453%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="1"/><text x="0.8314%" y="431.50"></text></g><g><title>`0x7FF82924DC94 (1 samples, 0.15%)</title><rect x="0.5814%" y="405" width="0.1453%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="1"/><text x="0.8314%" y="415.50"></text></g><g><title>`0x7FF82921118C (1 samples, 0.15%)</title><rect x="0.7267%" y="453" width="0.1453%" height="15" fill="rgb(240,193,28)" fg:x="5" fg:w="1"/><text x="0.9767%" y="463.50"></text></g><g><title>`0x7FF82924DB54 (1 samples, 0.15%)</title><rect x="0.7267%" y="437" width="0.1453%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="1"/><text x="0.9767%" y="447.50"></text></g><g><title>`0x7FF8291FD79A (5 samples, 0.73%)</title><rect x="0.2907%" y="533" width="0.7267%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="5"/><text x="0.5407%" y="543.50"></text></g><g><title>`0x7FF829213720 (5 samples, 0.73%)</title><rect x="0.2907%" y="517" width="0.7267%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="5"/><text x="0.5407%" y="527.50"></text></g><g><title>`0x7FF8292100D3 (5 samples, 0.73%)</title><rect x="0.2907%" y="501" width="0.7267%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="5"/><text x="0.5407%" y="511.50"></text></g><g><title>`0x7FF829210160 (3 samples, 0.44%)</title><rect x="0.5814%" y="485" width="0.4360%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="3"/><text x="0.8314%" y="495.50"></text></g><g><title>`0x7FF829210CA0 (2 samples, 0.29%)</title><rect x="0.7267%" y="469" width="0.2907%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="2"/><text x="0.9767%" y="479.50"></text></g><g><title>`0x7FF829211261 (1 samples, 0.15%)</title><rect x="0.8721%" y="453" width="0.1453%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="1"/><text x="1.1221%" y="463.50"></text></g><g><title>`0x7FF82924D6D4 (1 samples, 0.15%)</title><rect x="0.8721%" y="437" width="0.1453%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="1"/><text x="1.1221%" y="447.50"></text></g><g><title>`0x7FF829210F02 (1 samples, 0.15%)</title><rect x="1.0174%" y="373" width="0.1453%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="1"/><text x="1.2674%" y="383.50"></text></g><g><title>`0x7FF8292106F7 (1 samples, 0.15%)</title><rect x="1.0174%" y="357" width="0.1453%" height="15" fill="rgb(235,183,28)" fg:x="7" fg:w="1"/><text x="1.2674%" y="367.50"></text></g><g><title>`0x7FF82921086B (1 samples, 0.15%)</title><rect x="1.0174%" y="341" width="0.1453%" height="15" fill="rgb(221,5,38)" fg:x="7" fg:w="1"/><text x="1.2674%" y="351.50"></text></g><g><title>`0x7FF82924DC94 (1 samples, 0.15%)</title><rect x="1.0174%" y="325" width="0.1453%" height="15" fill="rgb(247,18,42)" fg:x="7" fg:w="1"/><text x="1.2674%" y="335.50"></text></g><g><title>`0x7FF8292111EE (1 samples, 0.15%)</title><rect x="1.1628%" y="357" width="0.1453%" height="15" fill="rgb(241,131,45)" fg:x="8" fg:w="1"/><text x="1.4128%" y="367.50"></text></g><g><title>`0x7FF82924DE34 (1 samples, 0.15%)</title><rect x="1.1628%" y="341" width="0.1453%" height="15" fill="rgb(249,31,29)" fg:x="8" fg:w="1"/><text x="1.4128%" y="351.50"></text></g><g><title>`0x7FF8291C7A72 (1 samples, 0.15%)</title><rect x="1.3081%" y="325" width="0.1453%" height="15" fill="rgb(225,111,53)" fg:x="9" fg:w="1"/><text x="1.5581%" y="335.50"></text></g><g><title>`0x7FF8291DB44D (1 samples, 0.15%)</title><rect x="1.3081%" y="309" width="0.1453%" height="15" fill="rgb(238,160,17)" fg:x="9" fg:w="1"/><text x="1.5581%" y="319.50"></text></g><g><title>`0x7FF8291DD6AA (1 samples, 0.15%)</title><rect x="1.3081%" y="293" width="0.1453%" height="15" fill="rgb(214,148,48)" fg:x="9" fg:w="1"/><text x="1.5581%" y="303.50"></text></g><g><title>`0x7FF8291C7B29 (1 samples, 0.15%)</title><rect x="1.4535%" y="325" width="0.1453%" height="15" fill="rgb(232,36,49)" fg:x="10" fg:w="1"/><text x="1.7035%" y="335.50"></text></g><g><title>`0x7FF8291C88A8 (1 samples, 0.15%)</title><rect x="1.4535%" y="309" width="0.1453%" height="15" fill="rgb(209,103,24)" fg:x="10" fg:w="1"/><text x="1.7035%" y="319.50"></text></g><g><title>`0x7FF8291C4479 (1 samples, 0.15%)</title><rect x="1.4535%" y="293" width="0.1453%" height="15" fill="rgb(229,88,8)" fg:x="10" fg:w="1"/><text x="1.7035%" y="303.50"></text></g><g><title>`0x7FF8291C4AAA (1 samples, 0.15%)</title><rect x="1.4535%" y="277" width="0.1453%" height="15" fill="rgb(213,181,19)" fg:x="10" fg:w="1"/><text x="1.7035%" y="287.50"></text></g><g><title>`0x7FF8291C4D42 (1 samples, 0.15%)</title><rect x="1.4535%" y="261" width="0.1453%" height="15" fill="rgb(254,191,54)" fg:x="10" fg:w="1"/><text x="1.7035%" y="271.50"></text></g><g><title>`0x7FF82924D9F4 (1 samples, 0.15%)</title><rect x="1.4535%" y="245" width="0.1453%" height="15" fill="rgb(241,83,37)" fg:x="10" fg:w="1"/><text x="1.7035%" y="255.50"></text></g><g><title>`0x7FF8291CFB53 (5 samples, 0.73%)</title><rect x="1.0174%" y="405" width="0.7267%" height="15" fill="rgb(233,36,39)" fg:x="7" fg:w="5"/><text x="1.2674%" y="415.50"></text></g><g><title>`0x7FF82921020F (5 samples, 0.73%)</title><rect x="1.0174%" y="389" width="0.7267%" height="15" fill="rgb(226,3,54)" fg:x="7" fg:w="5"/><text x="1.2674%" y="399.50"></text></g><g><title>`0x7FF829210F70 (4 samples, 0.58%)</title><rect x="1.1628%" y="373" width="0.5814%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="4"/><text x="1.4128%" y="383.50"></text></g><g><title>`0x7FF829211243 (3 samples, 0.44%)</title><rect x="1.3081%" y="357" width="0.4360%" height="15" fill="rgb(238,167,29)" fg:x="9" fg:w="3"/><text x="1.5581%" y="367.50"></text></g><g><title>`0x7FF8291C4C14 (3 samples, 0.44%)</title><rect x="1.3081%" y="341" width="0.4360%" height="15" fill="rgb(232,182,51)" fg:x="9" fg:w="3"/><text x="1.5581%" y="351.50"></text></g><g><title>`0x7FF8291C7BC4 (1 samples, 0.15%)</title><rect x="1.5988%" y="325" width="0.1453%" height="15" fill="rgb(231,60,39)" fg:x="11" fg:w="1"/><text x="1.8488%" y="335.50"></text></g><g><title>`0x7FF8291E2736 (1 samples, 0.15%)</title><rect x="1.5988%" y="309" width="0.1453%" height="15" fill="rgb(208,69,12)" fg:x="11" fg:w="1"/><text x="1.8488%" y="319.50"></text></g><g><title>`0x7FF826A205A2 (6 samples, 0.87%)</title><rect x="1.0174%" y="501" width="0.8721%" height="15" fill="rgb(235,93,37)" fg:x="7" fg:w="6"/><text x="1.2674%" y="511.50"></text></g><g><title>`0x7FF826A219C7 (6 samples, 0.87%)</title><rect x="1.0174%" y="485" width="0.8721%" height="15" fill="rgb(213,116,39)" fg:x="7" fg:w="6"/><text x="1.2674%" y="495.50"></text></g><g><title>`0x7FF826A1C050 (6 samples, 0.87%)</title><rect x="1.0174%" y="469" width="0.8721%" height="15" fill="rgb(222,207,29)" fg:x="7" fg:w="6"/><text x="1.2674%" y="479.50"></text></g><g><title>`0x7FF826C6DB72 (6 samples, 0.87%)</title><rect x="1.0174%" y="453" width="0.8721%" height="15" fill="rgb(206,96,30)" fg:x="7" fg:w="6"/><text x="1.2674%" y="463.50"></text></g><g><title>`0x7FF8291C6AF4 (6 samples, 0.87%)</title><rect x="1.0174%" y="437" width="0.8721%" height="15" fill="rgb(218,138,4)" fg:x="7" fg:w="6"/><text x="1.2674%" y="447.50"></text></g><g><title>`0x7FF8291C73E4 (6 samples, 0.87%)</title><rect x="1.0174%" y="421" width="0.8721%" height="15" fill="rgb(250,191,14)" fg:x="7" fg:w="6"/><text x="1.2674%" y="431.50"></text></g><g><title>`0x7FF8291CFBAE (1 samples, 0.15%)</title><rect x="1.7442%" y="405" width="0.1453%" height="15" fill="rgb(239,60,40)" fg:x="12" fg:w="1"/><text x="1.9942%" y="415.50"></text></g><g><title>`0x7FF8291ED947 (1 samples, 0.15%)</title><rect x="1.7442%" y="389" width="0.1453%" height="15" fill="rgb(206,27,48)" fg:x="12" fg:w="1"/><text x="1.9942%" y="399.50"></text></g><g><title>`0x7FF82921D110 (1 samples, 0.15%)</title><rect x="1.7442%" y="373" width="0.1453%" height="15" fill="rgb(225,35,8)" fg:x="12" fg:w="1"/><text x="1.9942%" y="383.50"></text></g><g><title>`0x7FF82921D08A (1 samples, 0.15%)</title><rect x="1.7442%" y="357" width="0.1453%" height="15" fill="rgb(250,213,24)" fg:x="12" fg:w="1"/><text x="1.9942%" y="367.50"></text></g><g><title>`0x7FF82921D2F7 (1 samples, 0.15%)</title><rect x="1.7442%" y="341" width="0.1453%" height="15" fill="rgb(247,123,22)" fg:x="12" fg:w="1"/><text x="1.9942%" y="351.50"></text></g><g><title>`0x7FF8291C9A1D (1 samples, 0.15%)</title><rect x="1.7442%" y="325" width="0.1453%" height="15" fill="rgb(231,138,38)" fg:x="12" fg:w="1"/><text x="1.9942%" y="335.50"></text></g><g><title>`0x7FF8285B78A7 (1 samples, 0.15%)</title><rect x="1.7442%" y="309" width="0.1453%" height="15" fill="rgb(231,145,46)" fg:x="12" fg:w="1"/><text x="1.9942%" y="319.50"></text></g><g><title>`0x7FF8285B7BA3 (1 samples, 0.15%)</title><rect x="1.7442%" y="293" width="0.1453%" height="15" fill="rgb(251,118,11)" fg:x="12" fg:w="1"/><text x="1.9942%" y="303.50"></text></g><g><title>`0x7FF8285C9798 (1 samples, 0.15%)</title><rect x="1.7442%" y="277" width="0.1453%" height="15" fill="rgb(217,147,25)" fg:x="12" fg:w="1"/><text x="1.9942%" y="287.50"></text></g><g><title>`0x7FF826CB0EB8 (1 samples, 0.15%)</title><rect x="1.7442%" y="261" width="0.1453%" height="15" fill="rgb(247,81,37)" fg:x="12" fg:w="1"/><text x="1.9942%" y="271.50"></text></g><g><title>`0x7FF8291BAC87 (1 samples, 0.15%)</title><rect x="1.7442%" y="245" width="0.1453%" height="15" fill="rgb(209,12,38)" fg:x="12" fg:w="1"/><text x="1.9942%" y="255.50"></text></g><g><title>`0x7FF8291B9B1A (1 samples, 0.15%)</title><rect x="1.7442%" y="229" width="0.1453%" height="15" fill="rgb(227,1,9)" fg:x="12" fg:w="1"/><text x="1.9942%" y="239.50"></text></g><g><title>`0x7FF82924D8B4 (1 samples, 0.15%)</title><rect x="1.7442%" y="213" width="0.1453%" height="15" fill="rgb(248,47,43)" fg:x="12" fg:w="1"/><text x="1.9942%" y="223.50"></text></g><g><title>`0x7FF826A2045F (7 samples, 1.02%)</title><rect x="1.0174%" y="517" width="1.0174%" height="15" fill="rgb(221,10,30)" fg:x="7" fg:w="7"/><text x="1.2674%" y="527.50"></text></g><g><title>`0x7FF826A205B4 (1 samples, 0.15%)</title><rect x="1.8895%" y="501" width="0.1453%" height="15" fill="rgb(210,229,1)" fg:x="13" fg:w="1"/><text x="2.1395%" y="511.50"></text></g><g><title>`0x7FF826A205E6 (1 samples, 0.15%)</title><rect x="1.8895%" y="485" width="0.1453%" height="15" fill="rgb(222,148,37)" fg:x="13" fg:w="1"/><text x="2.1395%" y="495.50"></text></g><g><title>`0x7FF826CA086C (1 samples, 0.15%)</title><rect x="1.8895%" y="469" width="0.1453%" height="15" fill="rgb(234,67,33)" fg:x="13" fg:w="1"/><text x="2.1395%" y="479.50"></text></g><g><title>`0x7FF8291EBA40 (1 samples, 0.15%)</title><rect x="1.8895%" y="453" width="0.1453%" height="15" fill="rgb(247,98,35)" fg:x="13" fg:w="1"/><text x="2.1395%" y="463.50"></text></g><g><title>slabmap.exe`std::rt::init (1 samples, 0.15%)</title><rect x="2.0349%" y="405" width="0.1453%" height="15" fill="rgb(247,138,52)" fg:x="14" fg:w="1"/><text x="2.2849%" y="415.50"></text></g><g><title>slabmap.exe`std::sys::pal::windows::init (1 samples, 0.15%)</title><rect x="2.0349%" y="389" width="0.1453%" height="15" fill="rgb(213,79,30)" fg:x="14" fg:w="1"/><text x="2.2849%" y="399.50"></text></g><g><title>slabmap.exe`std::sys::pal::windows::thread::Thread::set_name_wide (1 samples, 0.15%)</title><rect x="2.0349%" y="373" width="0.1453%" height="15" fill="rgb(246,177,23)" fg:x="14" fg:w="1"/><text x="2.2849%" y="383.50"></text></g><g><title>`0x7FF826CB224B (1 samples, 0.15%)</title><rect x="2.0349%" y="357" width="0.1453%" height="15" fill="rgb(230,62,27)" fg:x="14" fg:w="1"/><text x="2.2849%" y="367.50"></text></g><g><title>`0x7FF82924D7F4 (1 samples, 0.15%)</title><rect x="2.0349%" y="341" width="0.1453%" height="15" fill="rgb(216,154,8)" fg:x="14" fg:w="1"/><text x="2.2849%" y="351.50"></text></g><g><title>slabmap.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::is_empty (15 samples, 2.18%)</title><rect x="5.0872%" y="357" width="2.1802%" height="15" fill="rgb(244,35,45)" fg:x="35" fg:w="15"/><text x="5.3372%" y="367.50">s..</text></g><g><title>slabmap.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::len (15 samples, 2.18%)</title><rect x="5.0872%" y="341" width="2.1802%" height="15" fill="rgb(251,115,12)" fg:x="35" fg:w="15"/><text x="5.3372%" y="351.50">s..</text></g><g><title>slabmap.exe`core::ptr::write (1 samples, 0.15%)</title><rect x="8.7209%" y="341" width="0.1453%" height="15" fill="rgb(240,54,50)" fg:x="60" fg:w="1"/><text x="8.9709%" y="351.50"></text></g><g><title>slabmap.exe`core::intrinsics::unlikely (1 samples, 0.15%)</title><rect x="13.9535%" y="245" width="0.1453%" height="15" fill="rgb(233,84,52)" fg:x="96" fg:w="1"/><text x="14.2035%" y="255.50"></text></g><g><title>slabmap.exe`hashbrown::raw::RawTable&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::reserve(unsigned long long, hashbrown::map::make_hasher::closure_env$0 (2 samples, 0.29%)</title><rect x="13.9535%" y="261" width="0.2907%" height="15" fill="rgb(207,117,47)" fg:x="96" fg:w="2"/><text x="14.2035%" y="271.50"></text></g><g><title>slabmap.exe`hashbrown::raw::RawTable&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;usize,usize,rustc_hash::FxBuildHasher&gt; &gt;(unsigned long long, hashbrown::map::make_hasher::closure_env$0 (1 samples, 0.15%)</title><rect x="14.0988%" y="245" width="0.1453%" height="15" fill="rgb(249,43,39)" fg:x="97" fg:w="1"/><text x="14.3488%" y="255.50"></text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::reserve_rehash_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$&lt;Output,u64&gt; &gt; &gt; &gt;, hashbrown::raw::Fallibility, hashbrown::raw::TableLayout, enum2$&lt;core::option::Option&lt;void (*)(ptr_mut$ (1 samples, 0.15%)</title><rect x="14.0988%" y="229" width="0.1453%" height="15" fill="rgb(209,38,44)" fg:x="97" fg:w="1"/><text x="14.3488%" y="239.50"></text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::resize_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$ (1 samples, 0.15%)</title><rect x="14.0988%" y="213" width="0.1453%" height="15" fill="rgb(236,212,23)" fg:x="97" fg:w="1"/><text x="14.3488%" y="223.50"></text></g><g><title>slabmap.exe`core::ptr::copy_nonoverlapping (1 samples, 0.15%)</title><rect x="14.0988%" y="197" width="0.1453%" height="15" fill="rgb(242,79,21)" fg:x="97" fg:w="1"/><text x="14.3488%" y="207.50"></text></g><g><title>slabmap.exe`core::intrinsics::likely (1 samples, 0.15%)</title><rect x="14.5349%" y="245" width="0.1453%" height="15" fill="rgb(211,96,35)" fg:x="100" fg:w="1"/><text x="14.7849%" y="255.50"></text></g><g><title>slabmap.exe`hashbrown::control::bitmask::impl$2::next (6 samples, 0.87%)</title><rect x="14.6802%" y="245" width="0.8721%" height="15" fill="rgb(253,215,40)" fg:x="101" fg:w="6"/><text x="14.9302%" y="255.50"></text></g><g><title>slabmap.exe`hashbrown::control::bitmask::BitMask::lowest_set_bit (6 samples, 0.87%)</title><rect x="14.6802%" y="229" width="0.8721%" height="15" fill="rgb(211,81,21)" fg:x="101" fg:w="6"/><text x="14.9302%" y="239.50"></text></g><g><title>slabmap.exe`hashbrown::control::group::sse2::Group::load (2 samples, 0.29%)</title><rect x="15.5523%" y="245" width="0.2907%" height="15" fill="rgb(208,190,38)" fg:x="107" fg:w="2"/><text x="15.8023%" y="255.50"></text></g><g><title>slabmap.exe`core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.29%)</title><rect x="15.5523%" y="229" width="0.2907%" height="15" fill="rgb(235,213,38)" fg:x="107" fg:w="2"/><text x="15.8023%" y="239.50"></text></g><g><title>slabmap.exe`core::ptr::copy_nonoverlapping (2 samples, 0.29%)</title><rect x="15.5523%" y="213" width="0.2907%" height="15" fill="rgb(237,122,38)" fg:x="107" fg:w="2"/><text x="15.8023%" y="223.50"></text></g><g><title>slabmap.exe`hashbrown::control::group::sse2::Group::match_empty (5 samples, 0.73%)</title><rect x="15.8430%" y="245" width="0.7267%" height="15" fill="rgb(244,218,35)" fg:x="109" fg:w="5"/><text x="16.0930%" y="255.50"></text></g><g><title>slabmap.exe`hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.15%)</title><rect x="16.4244%" y="229" width="0.1453%" height="15" fill="rgb(240,68,47)" fg:x="113" fg:w="1"/><text x="16.6744%" y="239.50"></text></g><g><title>slabmap.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.15%)</title><rect x="16.4244%" y="213" width="0.1453%" height="15" fill="rgb(210,16,53)" fg:x="113" fg:w="1"/><text x="16.6744%" y="223.50"></text></g><g><title>slabmap.exe`hashbrown::control::group::sse2::Group::match_tag (16 samples, 2.33%)</title><rect x="16.5698%" y="245" width="2.3256%" height="15" fill="rgb(235,124,12)" fg:x="114" fg:w="16"/><text x="16.8198%" y="255.50">s..</text></g><g><title>slabmap.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (16 samples, 2.33%)</title><rect x="16.5698%" y="229" width="2.3256%" height="15" fill="rgb(224,169,11)" fg:x="114" fg:w="16"/><text x="16.8198%" y="239.50">s..</text></g><g><title>slabmap.exe`hashbrown::control::tag::Tag::full (11 samples, 1.60%)</title><rect x="18.8953%" y="245" width="1.5988%" height="15" fill="rgb(250,166,2)" fg:x="130" fg:w="11"/><text x="19.1453%" y="255.50"></text></g><g><title>slabmap.exe`hashbrown::raw::ProbeSeq::move_next (1 samples, 0.15%)</title><rect x="20.4942%" y="245" width="0.1453%" height="15" fill="rgb(242,216,29)" fg:x="141" fg:w="1"/><text x="20.7442%" y="255.50"></text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.15%)</title><rect x="20.6395%" y="245" width="0.1453%" height="15" fill="rgb(230,116,27)" fg:x="142" fg:w="1"/><text x="20.8895%" y="255.50"></text></g><g><title>slabmap.exe`hashbrown::control::group::sse2::Group::match_empty_or_deleted (1 samples, 0.15%)</title><rect x="20.6395%" y="229" width="0.1453%" height="15" fill="rgb(228,99,48)" fg:x="142" fg:w="1"/><text x="20.8895%" y="239.50"></text></g><g><title>slabmap.exe`hashbrown::map::HashMap&lt;usize,usize,rustc_hash::FxBuildHasher,alloc::alloc::Global&gt;::find_or_find_insert_slot (64 samples, 9.30%)</title><rect x="13.8081%" y="293" width="9.3023%" height="15" fill="rgb(253,11,6)" fg:x="95" fg:w="64"/><text x="14.0581%" y="303.50">slabmap.exe`h..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTable&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::find_or_find_insert_slot(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;usize,usize,usize&gt;, hashbrown::map::make_hasher::closure_env$0 (64 samples, 9.30%)</title><rect x="13.8081%" y="277" width="9.3023%" height="15" fill="rgb(247,143,39)" fg:x="95" fg:w="64"/><text x="14.0581%" y="287.50">slabmap.exe`h..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (61 samples, 8.87%)</title><rect x="14.2442%" y="261" width="8.8663%" height="15" fill="rgb(236,97,10)" fg:x="98" fg:w="61"/><text x="14.4942%" y="271.50">slabmap.exe`h..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::fix_insert_slot (16 samples, 2.33%)</title><rect x="20.7849%" y="245" width="2.3256%" height="15" fill="rgb(233,208,19)" fg:x="143" fg:w="16"/><text x="21.0349%" y="255.50">s..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::is_bucket_full (16 samples, 2.33%)</title><rect x="20.7849%" y="229" width="2.3256%" height="15" fill="rgb(216,164,2)" fg:x="143" fg:w="16"/><text x="21.0349%" y="239.50">s..</text></g><g><title>slabmap.exe`hashbrown::control::tag::Tag::is_full (13 samples, 1.89%)</title><rect x="21.2209%" y="213" width="1.8895%" height="15" fill="rgb(220,129,5)" fg:x="146" fg:w="13"/><text x="21.4709%" y="223.50">s..</text></g><g><title>slabmap.exe`core::ptr::mut_ptr::impl$0::sub(tuple$ (2 samples, 0.29%)</title><rect x="23.1105%" y="245" width="0.2907%" height="15" fill="rgb(242,17,10)" fg:x="159" fg:w="2"/><text x="23.3605%" y="255.50"></text></g><g><title>slabmap.exe`hashbrown::raw::Bucket&lt;tuple$&lt;usize,usize&gt; &gt;::write(tuple$ (27 samples, 3.92%)</title><rect x="23.1105%" y="277" width="3.9244%" height="15" fill="rgb(242,107,0)" fg:x="159" fg:w="27"/><text x="23.3605%" y="287.50">slab..</text></g><g><title>slabmap.exe`hashbrown::raw::Bucket&lt;tuple$&lt;usize,usize&gt; &gt;::as_ptr (27 samples, 3.92%)</title><rect x="23.1105%" y="261" width="3.9244%" height="15" fill="rgb(251,28,31)" fg:x="159" fg:w="27"/><text x="23.3605%" y="271.50">slab..</text></g><g><title>slabmap.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (25 samples, 3.63%)</title><rect x="23.4012%" y="245" width="3.6337%" height="15" fill="rgb(233,223,10)" fg:x="161" fg:w="25"/><text x="23.6512%" y="255.50">slab..</text></g><g><title>slabmap.exe`enum2$&lt;core::option::Option&lt;usize&gt; &gt;::map(enum2$&lt;core::option::Option&lt;usize&gt; &gt;, slabmap::old::impl$0::insert::closure_env$0 (111 samples, 16.13%)</title><rect x="12.2093%" y="325" width="16.1337%" height="15" fill="rgb(215,21,27)" fg:x="84" fg:w="111"/><text x="12.4593%" y="335.50">slabmap.exe`enum2$&lt;core::..</text></g><g><title>slabmap.exe`hashbrown::map::HashMap&lt;usize,usize,rustc_hash::FxBuildHasher,alloc::alloc::Global&gt;::insert&lt;usize,usize,rustc_hash::FxBuildHasher,alloc::alloc::Global&gt; (111 samples, 16.13%)</title><rect x="12.2093%" y="309" width="16.1337%" height="15" fill="rgb(232,23,21)" fg:x="84" fg:w="111"/><text x="12.4593%" y="319.50">slabmap.exe`hashbrown::ma..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTable&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::insert_in_slot(unsigned long long, hashbrown::raw::InsertSlot, tuple$ (36 samples, 5.23%)</title><rect x="23.1105%" y="293" width="5.2326%" height="15" fill="rgb(244,5,23)" fg:x="159" fg:w="36"/><text x="23.3605%" y="303.50">slabma..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::record_item_insert_at (9 samples, 1.31%)</title><rect x="27.0349%" y="277" width="1.3081%" height="15" fill="rgb(226,81,46)" fg:x="186" fg:w="9"/><text x="27.2849%" y="287.50"></text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::set_ctrl_hash (1 samples, 0.15%)</title><rect x="28.1977%" y="261" width="0.1453%" height="15" fill="rgb(247,70,30)" fg:x="194" fg:w="1"/><text x="28.4477%" y="271.50"></text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.15%)</title><rect x="28.1977%" y="245" width="0.1453%" height="15" fill="rgb(212,68,19)" fg:x="194" fg:w="1"/><text x="28.4477%" y="255.50"></text></g><g><title>slabmap.exe`core::num::impl$11::wrapping_sub (1 samples, 0.15%)</title><rect x="28.1977%" y="229" width="0.1453%" height="15" fill="rgb(240,187,13)" fg:x="194" fg:w="1"/><text x="28.4477%" y="239.50"></text></g><g><title>slabmap.exe`alloc::vec::Vec&lt;enum2$&lt;slab::Entry&lt;usize&gt; &gt;,alloc::alloc::Global&gt;::len (3 samples, 0.44%)</title><rect x="32.1221%" y="293" width="0.4360%" height="15" fill="rgb(223,113,26)" fg:x="221" fg:w="3"/><text x="32.3721%" y="303.50"></text></g><g><title>slabmap.exe`slabmap::old::Slap&lt;usize,usize&gt;::insert&lt;usize,usize&gt; (164 samples, 23.84%)</title><rect x="8.8663%" y="341" width="23.8372%" height="15" fill="rgb(206,192,2)" fg:x="61" fg:w="164"/><text x="9.1163%" y="351.50">slabmap.exe`slabmap::old::Slap&lt;usize,u..</text></g><g><title>slabmap.exe`slab::Slab&lt;usize&gt;::insert (30 samples, 4.36%)</title><rect x="28.3430%" y="325" width="4.3605%" height="15" fill="rgb(241,108,4)" fg:x="195" fg:w="30"/><text x="28.5930%" y="335.50">slabm..</text></g><g><title>slabmap.exe`slab::Slab&lt;usize&gt;::insert_at (28 samples, 4.07%)</title><rect x="28.6337%" y="309" width="4.0698%" height="15" fill="rgb(247,173,49)" fg:x="197" fg:w="28"/><text x="28.8837%" y="319.50">slab..</text></g><g><title>slabmap.exe`core::slice::impl$0::get(ref$&lt;slice2$&lt;enum2$&lt;slab::Entry (1 samples, 0.15%)</title><rect x="32.5581%" y="293" width="0.1453%" height="15" fill="rgb(224,114,35)" fg:x="224" fg:w="1"/><text x="32.8081%" y="303.50"></text></g><g><title>slabmap.exe`alloc::vec::Vec&lt;enum2$&lt;slab::Entry&lt;usize&gt; &gt;,alloc::alloc::Global&gt;::as_slice (1 samples, 0.15%)</title><rect x="32.5581%" y="277" width="0.1453%" height="15" fill="rgb(245,159,27)" fg:x="224" fg:w="1"/><text x="32.8081%" y="287.50"></text></g><g><title>slabmap.exe`alloc::vec::Vec&lt;enum2$&lt;slab::Entry&lt;usize&gt; &gt;,alloc::alloc::Global&gt;::as_ptr (1 samples, 0.15%)</title><rect x="32.5581%" y="261" width="0.1453%" height="15" fill="rgb(245,172,44)" fg:x="224" fg:w="1"/><text x="32.8081%" y="271.50"></text></g><g><title>slabmap.exe`alloc::raw_vec::RawVec&lt;enum2$&lt;slab::Entry&lt;usize&gt; &gt;,alloc::alloc::Global&gt;::ptr (1 samples, 0.15%)</title><rect x="32.5581%" y="245" width="0.1453%" height="15" fill="rgb(236,23,11)" fg:x="224" fg:w="1"/><text x="32.8081%" y="255.50"></text></g><g><title>slabmap.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1 samples, 0.15%)</title><rect x="32.5581%" y="229" width="0.1453%" height="15" fill="rgb(205,117,38)" fg:x="224" fg:w="1"/><text x="32.8081%" y="239.50"></text></g><g><title>slabmap.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1 samples, 0.15%)</title><rect x="32.5581%" y="213" width="0.1453%" height="15" fill="rgb(237,72,25)" fg:x="224" fg:w="1"/><text x="32.8081%" y="223.50"></text></g><g><title>slabmap.exe`core::intrinsics::likely (50 samples, 7.27%)</title><rect x="36.3372%" y="261" width="7.2674%" height="15" fill="rgb(244,70,9)" fg:x="250" fg:w="50"/><text x="36.5872%" y="271.50">slabmap.ex..</text></g><g><title>slabmap.exe`hashbrown::control::bitmask::impl$2::next (15 samples, 2.18%)</title><rect x="43.6047%" y="261" width="2.1802%" height="15" fill="rgb(217,125,39)" fg:x="300" fg:w="15"/><text x="43.8547%" y="271.50">s..</text></g><g><title>slabmap.exe`hashbrown::control::bitmask::BitMask::lowest_set_bit (15 samples, 2.18%)</title><rect x="43.6047%" y="245" width="2.1802%" height="15" fill="rgb(235,36,10)" fg:x="300" fg:w="15"/><text x="43.8547%" y="255.50">s..</text></g><g><title>slabmap.exe`hashbrown::control::group::sse2::Group::match_tag (17 samples, 2.47%)</title><rect x="45.7849%" y="261" width="2.4709%" height="15" fill="rgb(251,123,47)" fg:x="315" fg:w="17"/><text x="46.0349%" y="271.50">sl..</text></g><g><title>slabmap.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (17 samples, 2.47%)</title><rect x="45.7849%" y="245" width="2.4709%" height="15" fill="rgb(221,13,13)" fg:x="315" fg:w="17"/><text x="46.0349%" y="255.50">sl..</text></g><g><title>slabmap.exe`hashbrown::control::tag::Tag::full (1 samples, 0.15%)</title><rect x="48.2558%" y="261" width="0.1453%" height="15" fill="rgb(238,131,9)" fg:x="332" fg:w="1"/><text x="48.5058%" y="271.50"></text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::probe_seq (16 samples, 2.33%)</title><rect x="48.4012%" y="261" width="2.3256%" height="15" fill="rgb(211,50,8)" fg:x="333" fg:w="16"/><text x="48.6512%" y="271.50">s..</text></g><g><title>slabmap.exe`hashbrown::map::equivalent_key::closure$0(hashbrown::map::equivalent_key::closure_env$0&lt;usize,usize,usize&gt;*, tuple$ (1 samples, 0.15%)</title><rect x="50.7267%" y="245" width="0.1453%" height="15" fill="rgb(245,182,24)" fg:x="349" fg:w="1"/><text x="50.9767%" y="255.50"></text></g><g><title>slabmap.exe`hashbrown::impl$0::equivalent (1 samples, 0.15%)</title><rect x="50.7267%" y="229" width="0.1453%" height="15" fill="rgb(242,14,37)" fg:x="349" fg:w="1"/><text x="50.9767%" y="239.50"></text></g><g><title>slabmap.exe`core::cmp::impls::impl$9::eq (1 samples, 0.15%)</title><rect x="50.7267%" y="213" width="0.1453%" height="15" fill="rgb(246,228,12)" fg:x="349" fg:w="1"/><text x="50.9767%" y="223.50"></text></g><g><title>slabmap.exe`core::cmp::impls::impl$21::eq (1 samples, 0.15%)</title><rect x="50.7267%" y="197" width="0.1453%" height="15" fill="rgb(213,55,15)" fg:x="349" fg:w="1"/><text x="50.9767%" y="207.50"></text></g><g><title>slabmap.exe`hashbrown::raw::RawTable&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0 (123 samples, 17.88%)</title><rect x="35.3198%" y="293" width="17.8779%" height="15" fill="rgb(209,9,3)" fg:x="243" fg:w="123"/><text x="35.5698%" y="303.50">slabmap.exe`hashbrown::raw::..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (123 samples, 17.88%)</title><rect x="35.3198%" y="277" width="17.8779%" height="15" fill="rgb(230,59,30)" fg:x="243" fg:w="123"/><text x="35.5698%" y="287.50">slabmap.exe`hashbrown::raw::..</text></g><g><title>slabmap.exe`hashbrown::raw::impl$8::find::closure$0(hashbrown::raw::impl$8::find::closure_env$0&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global,hashbrown::map::equivalent_key::closure_env$0 (17 samples, 2.47%)</title><rect x="50.7267%" y="261" width="2.4709%" height="15" fill="rgb(209,121,21)" fg:x="349" fg:w="17"/><text x="50.9767%" y="271.50">sl..</text></g><g><title>slabmap.exe`hashbrown::raw::Bucket&lt;tuple$&lt;usize,usize&gt; &gt;::as_ref (16 samples, 2.33%)</title><rect x="50.8721%" y="245" width="2.3256%" height="15" fill="rgb(220,109,13)" fg:x="350" fg:w="16"/><text x="51.1221%" y="255.50">s..</text></g><g><title>slabmap.exe`hashbrown::raw::Bucket&lt;tuple$&lt;usize,usize&gt; &gt;::as_ptr (16 samples, 2.33%)</title><rect x="50.8721%" y="229" width="2.3256%" height="15" fill="rgb(232,18,1)" fg:x="350" fg:w="16"/><text x="51.1221%" y="239.50">s..</text></g><g><title>slabmap.exe`core::ptr::mut_ptr::impl$0::sub(tuple$ (16 samples, 2.33%)</title><rect x="50.8721%" y="213" width="2.3256%" height="15" fill="rgb(215,41,42)" fg:x="350" fg:w="16"/><text x="51.1221%" y="223.50">s..</text></g><g><title>slabmap.exe`core::num::impl$7::leading_zeros (10 samples, 1.45%)</title><rect x="55.2326%" y="229" width="1.4535%" height="15" fill="rgb(224,123,36)" fg:x="380" fg:w="10"/><text x="55.4826%" y="239.50"></text></g><g><title>slabmap.exe`hashbrown::control::bitmask::BitMask::leading_zeros (15 samples, 2.18%)</title><rect x="55.2326%" y="245" width="2.1802%" height="15" fill="rgb(240,125,3)" fg:x="380" fg:w="15"/><text x="55.4826%" y="255.50">s..</text></g><g><title>slabmap.exe`core::num::impl$7::trailing_zeros (5 samples, 0.73%)</title><rect x="56.6860%" y="229" width="0.7267%" height="15" fill="rgb(205,98,50)" fg:x="390" fg:w="5"/><text x="56.9360%" y="239.50"></text></g><g><title>slabmap.exe`core::core_arch::x86::sse2::_mm_cmpeq_epi8 (3 samples, 0.44%)</title><rect x="57.4128%" y="213" width="0.4360%" height="15" fill="rgb(205,185,37)" fg:x="395" fg:w="3"/><text x="57.6628%" y="223.50"></text></g><g><title>slabmap.exe`hashbrown::control::group::sse2::Group::load (7 samples, 1.02%)</title><rect x="57.4128%" y="245" width="1.0174%" height="15" fill="rgb(238,207,15)" fg:x="395" fg:w="7"/><text x="57.6628%" y="255.50"></text></g><g><title>slabmap.exe`hashbrown::control::group::sse2::Group::match_tag (7 samples, 1.02%)</title><rect x="57.4128%" y="229" width="1.0174%" height="15" fill="rgb(213,199,42)" fg:x="395" fg:w="7"/><text x="57.6628%" y="239.50"></text></g><g><title>slabmap.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.58%)</title><rect x="57.8488%" y="213" width="0.5814%" height="15" fill="rgb(235,201,11)" fg:x="398" fg:w="4"/><text x="58.0988%" y="223.50"></text></g><g><title>slabmap.exe`hashbrown::raw::RawTable&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::remove_entry&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global,hashbrown::map::equivalent_key::closure_env$0&lt;usize,usize,usize&gt; &gt;(unsigned long long, hashbrown::map::equivalent_key::closure_env$0 (169 samples, 24.56%)</title><rect x="34.3023%" y="309" width="24.5640%" height="15" fill="rgb(207,46,11)" fg:x="236" fg:w="169"/><text x="34.5523%" y="319.50">slabmap.exe`hashbrown::raw::RawTable&lt;tu..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTable&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::remove(hashbrown::raw::Bucket&lt;tuple$ (39 samples, 5.67%)</title><rect x="53.1977%" y="293" width="5.6686%" height="15" fill="rgb(241,35,35)" fg:x="366" fg:w="39"/><text x="53.4477%" y="303.50">slabmap..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTable&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::erase_no_drop(hashbrown::raw::Bucket&lt;tuple$ (39 samples, 5.67%)</title><rect x="53.1977%" y="277" width="5.6686%" height="15" fill="rgb(243,32,47)" fg:x="366" fg:w="39"/><text x="53.4477%" y="287.50">slabmap..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::erase (39 samples, 5.67%)</title><rect x="53.1977%" y="261" width="5.6686%" height="15" fill="rgb(247,202,23)" fg:x="366" fg:w="39"/><text x="53.4477%" y="271.50">slabmap..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::set_ctrl (3 samples, 0.44%)</title><rect x="58.4302%" y="245" width="0.4360%" height="15" fill="rgb(219,102,11)" fg:x="402" fg:w="3"/><text x="58.6802%" y="255.50"></text></g><g><title>slabmap.exe`core::mem::replace(enum2$&lt;slab::Entry&lt;usize&gt; &gt;*, enum2$&lt;slab::Entry (52 samples, 7.56%)</title><rect x="59.4477%" y="261" width="7.5581%" height="15" fill="rgb(243,110,44)" fg:x="409" fg:w="52"/><text x="59.6977%" y="271.50">slabmap.ex..</text></g><g><title>slabmap.exe`enum2$&lt;core::option::Option&lt;usize&gt; &gt;::and_then(enum2$&lt;core::option::Option&lt;usize&gt; &gt;, slabmap::old::impl$0::remove::closure_env$0 (234 samples, 34.01%)</title><rect x="33.7209%" y="325" width="34.0116%" height="15" fill="rgb(222,74,54)" fg:x="232" fg:w="234"/><text x="33.9709%" y="335.50">slabmap.exe`enum2$&lt;core::option::Option&lt;usize&gt; &gt;::and_t..</text></g><g><title>slabmap.exe`slabmap::old::impl$0::remove::closure$0(slabmap::old::impl$0::remove::closure_env$0 (61 samples, 8.87%)</title><rect x="58.8663%" y="309" width="8.8663%" height="15" fill="rgb(216,99,12)" fg:x="405" fg:w="61"/><text x="59.1163%" y="319.50">slabmap.exe`s..</text></g><g><title>slabmap.exe`slab::Slab&lt;usize&gt;::remove (61 samples, 8.87%)</title><rect x="58.8663%" y="293" width="8.8663%" height="15" fill="rgb(226,22,26)" fg:x="405" fg:w="61"/><text x="59.1163%" y="303.50">slabmap.exe`s..</text></g><g><title>slabmap.exe`slab::Slab&lt;usize&gt;::try_remove (61 samples, 8.87%)</title><rect x="58.8663%" y="277" width="8.8663%" height="15" fill="rgb(217,163,10)" fg:x="405" fg:w="61"/><text x="59.1163%" y="287.50">slabmap.exe`s..</text></g><g><title>slabmap.exe`core::slice::impl$0::get_mut(ref_mut$&lt;slice2$&lt;enum2$&lt;slab::Entry (5 samples, 0.73%)</title><rect x="67.0058%" y="261" width="0.7267%" height="15" fill="rgb(213,25,53)" fg:x="461" fg:w="5"/><text x="67.2558%" y="271.50"></text></g><g><title>slabmap.exe`core::slice::index::impl$2::get_mut(unsigned long long, ref_mut$&lt;slice2$&lt;enum2$&lt;slab::Entry (5 samples, 0.73%)</title><rect x="67.0058%" y="245" width="0.7267%" height="15" fill="rgb(252,105,26)" fg:x="461" fg:w="5"/><text x="67.2558%" y="255.50"></text></g><g><title>slabmap.exe`core::hash::impls::impl$5::hash (2 samples, 0.29%)</title><rect x="67.8779%" y="245" width="0.2907%" height="15" fill="rgb(220,39,43)" fg:x="467" fg:w="2"/><text x="68.1279%" y="255.50"></text></g><g><title>slabmap.exe`core::hash::impls::impl$13::hash (2 samples, 0.29%)</title><rect x="67.8779%" y="229" width="0.2907%" height="15" fill="rgb(229,68,48)" fg:x="467" fg:w="2"/><text x="68.1279%" y="239.50"></text></g><g><title>slabmap.exe`rustc_hash::impl$3::write_usize (2 samples, 0.29%)</title><rect x="67.8779%" y="213" width="0.2907%" height="15" fill="rgb(252,8,32)" fg:x="467" fg:w="2"/><text x="68.1279%" y="223.50"></text></g><g><title>slabmap.exe`rustc_hash::FxHasher::add_to_hash (2 samples, 0.29%)</title><rect x="67.8779%" y="197" width="0.2907%" height="15" fill="rgb(223,20,43)" fg:x="467" fg:w="2"/><text x="68.1279%" y="207.50"></text></g><g><title>slabmap.exe`core::num::impl$11::wrapping_mul (2 samples, 0.29%)</title><rect x="67.8779%" y="181" width="0.2907%" height="15" fill="rgb(229,81,49)" fg:x="467" fg:w="2"/><text x="68.1279%" y="191.50"></text></g><g><title>slabmap.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::push (436 samples, 63.37%)</title><rect x="7.2674%" y="357" width="63.3721%" height="15" fill="rgb(236,28,36)" fg:x="50" fg:w="436"/><text x="7.5174%" y="367.50">slabmap.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::push</text></g><g><title>slabmap.exe`slabmap::old::Slap&lt;usize,usize&gt;::remove&lt;usize,usize&gt; (261 samples, 37.94%)</title><rect x="32.7035%" y="341" width="37.9360%" height="15" fill="rgb(249,185,26)" fg:x="225" fg:w="261"/><text x="32.9535%" y="351.50">slabmap.exe`slabmap::old::Slap&lt;usize,usize&gt;::remove&lt;usize,usiz..</text></g><g><title>slabmap.exe`std::collections::hash::map::HashMap&lt;usize,usize,rustc_hash::FxBuildHasher&gt;::remove (20 samples, 2.91%)</title><rect x="67.7326%" y="325" width="2.9070%" height="15" fill="rgb(249,174,33)" fg:x="466" fg:w="20"/><text x="67.9826%" y="335.50">sl..</text></g><g><title>slabmap.exe`hashbrown::map::HashMap&lt;usize,usize,rustc_hash::FxBuildHasher,alloc::alloc::Global&gt;::remove (19 samples, 2.76%)</title><rect x="67.8779%" y="309" width="2.7616%" height="15" fill="rgb(233,201,37)" fg:x="467" fg:w="19"/><text x="68.1279%" y="319.50">sl..</text></g><g><title>slabmap.exe`hashbrown::map::HashMap&lt;usize,usize,rustc_hash::FxBuildHasher,alloc::alloc::Global&gt;::remove_entry (19 samples, 2.76%)</title><rect x="67.8779%" y="293" width="2.7616%" height="15" fill="rgb(221,78,26)" fg:x="467" fg:w="19"/><text x="68.1279%" y="303.50">sl..</text></g><g><title>slabmap.exe`hashbrown::map::make_hash (19 samples, 2.76%)</title><rect x="67.8779%" y="277" width="2.7616%" height="15" fill="rgb(250,127,30)" fg:x="467" fg:w="19"/><text x="68.1279%" y="287.50">sl..</text></g><g><title>slabmap.exe`core::hash::BuildHasher::hash_one (19 samples, 2.76%)</title><rect x="67.8779%" y="261" width="2.7616%" height="15" fill="rgb(230,49,44)" fg:x="467" fg:w="19"/><text x="68.1279%" y="271.50">sl..</text></g><g><title>slabmap.exe`rustc_hash::impl$3::finish (17 samples, 2.47%)</title><rect x="68.1686%" y="245" width="2.4709%" height="15" fill="rgb(229,67,23)" fg:x="469" fg:w="17"/><text x="68.4186%" y="255.50">sl..</text></g><g><title>slabmap.exe`core::num::impl$11::rotate_left (17 samples, 2.47%)</title><rect x="68.1686%" y="229" width="2.4709%" height="15" fill="rgb(249,83,47)" fg:x="469" fg:w="17"/><text x="68.4186%" y="239.50">sl..</text></g><g><title>slabmap.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::as_ptr (1 samples, 0.15%)</title><rect x="70.7849%" y="341" width="0.1453%" height="15" fill="rgb(215,43,3)" fg:x="487" fg:w="1"/><text x="71.0349%" y="351.50"></text></g><g><title>slabmap.exe`rand::distr::uniform::impl$8::is_empty(core::ops::range::Range (1 samples, 0.15%)</title><rect x="73.2558%" y="309" width="0.1453%" height="15" fill="rgb(238,154,13)" fg:x="504" fg:w="1"/><text x="73.5058%" y="319.50"></text></g><g><title>slabmap.exe`core::cmp::impls::impl$58::lt (1 samples, 0.15%)</title><rect x="73.2558%" y="293" width="0.1453%" height="15" fill="rgb(219,56,2)" fg:x="504" fg:w="1"/><text x="73.5058%" y="303.50"></text></g><g><title>slabmap.exe`rand::distr::utils::impl$5::wmul (3 samples, 0.44%)</title><rect x="74.2733%" y="245" width="0.4360%" height="15" fill="rgb(233,0,4)" fg:x="511" fg:w="3"/><text x="74.5233%" y="255.50"></text></g><g><title>slabmap.exe`chacha20::ChaChaCore&lt;chacha20::R12,enum2$&lt;chacha20::variants::Legacy&gt; &gt;::generate&lt;chacha20::R12,enum2$&lt;chacha20::variants::Legacy&gt; &gt; (1 samples, 0.15%)</title><rect x="75.8721%" y="117" width="0.1453%" height="15" fill="rgb(235,30,7)" fg:x="522" fg:w="1"/><text x="76.1221%" y="127.50"></text></g><g><title>slabmap.exe`core::core_arch::x86::avx2::_mm256_add_epi32 (6 samples, 0.87%)</title><rect x="76.0174%" y="37" width="0.8721%" height="15" fill="rgb(250,79,13)" fg:x="523" fg:w="6"/><text x="76.2674%" y="47.50"></text></g><g><title>slabmap.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi8 (3 samples, 0.44%)</title><rect x="76.8895%" y="37" width="0.4360%" height="15" fill="rgb(211,146,34)" fg:x="529" fg:w="3"/><text x="77.1395%" y="47.50"></text></g><g><title>slabmap.exe`core::core_arch::x86::avx2::_mm256_slli_epi32 (6 samples, 0.87%)</title><rect x="77.3256%" y="37" width="0.8721%" height="15" fill="rgb(228,22,38)" fg:x="532" fg:w="6"/><text x="77.5756%" y="47.50"></text></g><g><title>slabmap.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::len (51 samples, 7.41%)</title><rect x="70.9302%" y="341" width="7.4128%" height="15" fill="rgb(235,168,5)" fg:x="488" fg:w="51"/><text x="71.1802%" y="351.50">slabmap.ex..</text></g><g><title>slabmap.exe`rand::rng::Rng::random_range&lt;rand::rngs::thread::ThreadRng,usize,core::ops::range::Range&lt;usize&gt; &gt;(rand::rngs::thread::ThreadRng*, core::ops::range::Range (48 samples, 6.98%)</title><rect x="71.3663%" y="325" width="6.9767%" height="15" fill="rgb(221,155,16)" fg:x="491" fg:w="48"/><text x="71.6163%" y="335.50">slabmap.e..</text></g><g><title>slabmap.exe`rand::distr::uniform::impl$8::sample_single(core::ops::range::Range (34 samples, 4.94%)</title><rect x="73.4012%" y="309" width="4.9419%" height="15" fill="rgb(215,215,53)" fg:x="505" fg:w="34"/><text x="73.6512%" y="319.50">slabma..</text></g><g><title>slabmap.exe`rand::distr::uniform::int::impl$1::sample_single (34 samples, 4.94%)</title><rect x="73.4012%" y="293" width="4.9419%" height="15" fill="rgb(223,4,10)" fg:x="505" fg:w="34"/><text x="73.6512%" y="303.50">slabma..</text></g><g><title>slabmap.exe`rand::distr::uniform::int::impl$23::sample_single (31 samples, 4.51%)</title><rect x="73.8372%" y="277" width="4.5058%" height="15" fill="rgb(234,103,6)" fg:x="508" fg:w="31"/><text x="74.0872%" y="287.50">slabm..</text></g><g><title>slabmap.exe`rand::distr::uniform::int::impl$23::sample_single_inclusive (29 samples, 4.22%)</title><rect x="74.1279%" y="261" width="4.2151%" height="15" fill="rgb(227,97,0)" fg:x="510" fg:w="29"/><text x="74.3779%" y="271.50">slabm..</text></g><g><title>slabmap.exe`rand::rng::Rng::random (25 samples, 3.63%)</title><rect x="74.7093%" y="245" width="3.6337%" height="15" fill="rgb(234,150,53)" fg:x="514" fg:w="25"/><text x="74.9593%" y="255.50">slab..</text></g><g><title>slabmap.exe`rand::distr::integer::impl$2::sample (25 samples, 3.63%)</title><rect x="74.7093%" y="229" width="3.6337%" height="15" fill="rgb(228,201,54)" fg:x="514" fg:w="25"/><text x="74.9593%" y="239.50">slab..</text></g><g><title>slabmap.exe`rand::rngs::thread::impl$3::next_u32 (25 samples, 3.63%)</title><rect x="74.7093%" y="213" width="3.6337%" height="15" fill="rgb(222,22,37)" fg:x="514" fg:w="25"/><text x="74.9593%" y="223.50">slab..</text></g><g><title>slabmap.exe`rand::rngs::reseeding::impl$1::next_u32(rand::rngs::reseeding::ReseedingRng (25 samples, 3.63%)</title><rect x="74.7093%" y="197" width="3.6337%" height="15" fill="rgb(237,53,32)" fg:x="514" fg:w="25"/><text x="74.9593%" y="207.50">slab..</text></g><g><title>slabmap.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::reseeding::ReseedingCore (25 samples, 3.63%)</title><rect x="74.7093%" y="181" width="3.6337%" height="15" fill="rgb(233,25,53)" fg:x="514" fg:w="25"/><text x="74.9593%" y="191.50">slab..</text></g><g><title>slabmap.exe`rand_core::block::BlockRng&lt;rand::rngs::reseeding::ReseedingCore&lt;chacha20::rng::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (18 samples, 2.62%)</title><rect x="75.7267%" y="165" width="2.6163%" height="15" fill="rgb(210,40,34)" fg:x="521" fg:w="18"/><text x="75.9767%" y="175.50">sl..</text></g><g><title>slabmap.exe`rand::rngs::reseeding::impl$4::generate(rand::rngs::reseeding::ReseedingCore (18 samples, 2.62%)</title><rect x="75.7267%" y="149" width="2.6163%" height="15" fill="rgb(241,220,44)" fg:x="521" fg:w="18"/><text x="75.9767%" y="159.50">sl..</text></g><g><title>slabmap.exe`chacha20::rng::impl$42::generate (17 samples, 2.47%)</title><rect x="75.8721%" y="133" width="2.4709%" height="15" fill="rgb(235,28,35)" fg:x="522" fg:w="17"/><text x="76.1221%" y="143.50">sl..</text></g><g><title>slabmap.exe`chacha20::backends::avx2::rng_inner&lt;chacha20::R12,enum2$&lt;chacha20::variants::Legacy&gt; &gt;(chacha20::ChaChaCore&lt;chacha20::R12,enum2$ (16 samples, 2.33%)</title><rect x="76.0174%" y="117" width="2.3256%" height="15" fill="rgb(210,56,17)" fg:x="523" fg:w="16"/><text x="76.2674%" y="127.50">s..</text></g><g><title>slabmap.exe`chacha20::backends::avx2::Backend&lt;chacha20::R12,enum2$&lt;chacha20::variants::Legacy&gt; &gt;::rng_gen_par_ks_blocks (16 samples, 2.33%)</title><rect x="76.0174%" y="101" width="2.3256%" height="15" fill="rgb(224,130,29)" fg:x="523" fg:w="16"/><text x="76.2674%" y="111.50">s..</text></g><g><title>slabmap.exe`chacha20::backends::avx2::rounds (16 samples, 2.33%)</title><rect x="76.0174%" y="85" width="2.3256%" height="15" fill="rgb(235,212,8)" fg:x="523" fg:w="16"/><text x="76.2674%" y="95.50">s..</text></g><g><title>slabmap.exe`chacha20::backends::avx2::double_quarter_round (16 samples, 2.33%)</title><rect x="76.0174%" y="69" width="2.3256%" height="15" fill="rgb(223,33,50)" fg:x="523" fg:w="16"/><text x="76.2674%" y="79.50">s..</text></g><g><title>slabmap.exe`chacha20::backends::avx2::add_xor_rot (16 samples, 2.33%)</title><rect x="76.0174%" y="53" width="2.3256%" height="15" fill="rgb(219,149,13)" fg:x="523" fg:w="16"/><text x="76.2674%" y="63.50">s..</text></g><g><title>slabmap.exe`core::core_arch::x86::avx2::_mm256_xor_si256 (1 samples, 0.15%)</title><rect x="78.1977%" y="37" width="0.1453%" height="15" fill="rgb(250,156,29)" fg:x="538" fg:w="1"/><text x="78.4477%" y="47.50"></text></g><g><title>slabmap.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::set_len (6 samples, 0.87%)</title><rect x="78.3430%" y="341" width="0.8721%" height="15" fill="rgb(216,193,19)" fg:x="539" fg:w="6"/><text x="78.5930%" y="351.50"></text></g><g><title>slabmap.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::swap_remove (72 samples, 10.47%)</title><rect x="70.6395%" y="357" width="10.4651%" height="15" fill="rgb(216,135,14)" fg:x="486" fg:w="72"/><text x="70.8895%" y="367.50">slabmap.exe`all..</text></g><g><title>slabmap.exe`core::ptr::copy (13 samples, 1.89%)</title><rect x="79.2151%" y="341" width="1.8895%" height="15" fill="rgb(241,47,5)" fg:x="545" fg:w="13"/><text x="79.4651%" y="351.50">s..</text></g><g><title>slabmap.exe`core::ptr::drop_in_place(alloc::vec::Vec (1 samples, 0.15%)</title><rect x="81.1047%" y="357" width="0.1453%" height="15" fill="rgb(233,42,35)" fg:x="558" fg:w="1"/><text x="81.3547%" y="367.50"></text></g><g><title>slabmap.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (1 samples, 0.15%)</title><rect x="81.1047%" y="341" width="0.1453%" height="15" fill="rgb(231,13,6)" fg:x="558" fg:w="1"/><text x="81.3547%" y="351.50"></text></g><g><title>slabmap.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (1 samples, 0.15%)</title><rect x="81.1047%" y="325" width="0.1453%" height="15" fill="rgb(207,181,40)" fg:x="558" fg:w="1"/><text x="81.3547%" y="335.50"></text></g><g><title>slabmap.exe`std::io::stdio::_print (1 samples, 0.15%)</title><rect x="81.1047%" y="309" width="0.1453%" height="15" fill="rgb(254,173,49)" fg:x="558" fg:w="1"/><text x="81.3547%" y="319.50"></text></g><g><title>slabmap.exe`std::io::stdio::print_to (1 samples, 0.15%)</title><rect x="81.1047%" y="293" width="0.1453%" height="15" fill="rgb(221,1,38)" fg:x="558" fg:w="1"/><text x="81.3547%" y="303.50"></text></g><g><title>slabmap.exe`std::io::stdio::impl$16::write_fmt (1 samples, 0.15%)</title><rect x="81.1047%" y="277" width="0.1453%" height="15" fill="rgb(206,124,46)" fg:x="558" fg:w="1"/><text x="81.3547%" y="287.50"></text></g><g><title>slabmap.exe`std::io::Write::write_fmt (1 samples, 0.15%)</title><rect x="81.1047%" y="261" width="0.1453%" height="15" fill="rgb(249,21,11)" fg:x="558" fg:w="1"/><text x="81.3547%" y="271.50"></text></g><g><title>slabmap.exe`std::io::default_write_fmt (1 samples, 0.15%)</title><rect x="81.1047%" y="245" width="0.1453%" height="15" fill="rgb(222,201,40)" fg:x="558" fg:w="1"/><text x="81.3547%" y="255.50"></text></g><g><title>slabmap.exe`core::fmt::write (1 samples, 0.15%)</title><rect x="81.1047%" y="229" width="0.1453%" height="15" fill="rgb(235,61,29)" fg:x="558" fg:w="1"/><text x="81.3547%" y="239.50"></text></g><g><title>slabmap.exe`core::cell::UnsafeCell&lt;rand::rngs::reseeding::ReseedingRng&lt;chacha20::rng::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::get (1 samples, 0.15%)</title><rect x="85.6105%" y="277" width="0.1453%" height="15" fill="rgb(219,207,3)" fg:x="589" fg:w="1"/><text x="85.8605%" y="287.50"></text></g><g><title>slabmap.exe`chacha20::ChaChaCore&lt;chacha20::R12,enum2$&lt;chacha20::variants::Legacy&gt; &gt;::generate&lt;chacha20::R12,enum2$&lt;chacha20::variants::Legacy&gt; &gt; (2 samples, 0.29%)</title><rect x="88.8081%" y="197" width="0.2907%" height="15" fill="rgb(222,56,46)" fg:x="611" fg:w="2"/><text x="89.0581%" y="207.50"></text></g><g><title>slabmap.exe`core::core_arch::x86::avx2::_mm256_add_epi32 (16 samples, 2.33%)</title><rect x="89.3895%" y="117" width="2.3256%" height="15" fill="rgb(239,76,54)" fg:x="615" fg:w="16"/><text x="89.6395%" y="127.50">s..</text></g><g><title>slabmap.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi8 (9 samples, 1.31%)</title><rect x="91.7151%" y="117" width="1.3081%" height="15" fill="rgb(231,124,27)" fg:x="631" fg:w="9"/><text x="91.9651%" y="127.50"></text></g><g><title>slabmap.exe`core::core_arch::x86::avx2::_mm256_slli_epi32 (15 samples, 2.18%)</title><rect x="93.0233%" y="117" width="2.1802%" height="15" fill="rgb(249,195,6)" fg:x="640" fg:w="15"/><text x="93.2733%" y="127.50">s..</text></g><g><title>slabmap.exe`chacha20::backends::avx2::add_xor_rot (43 samples, 6.25%)</title><rect x="89.3895%" y="133" width="6.2500%" height="15" fill="rgb(237,174,47)" fg:x="615" fg:w="43"/><text x="89.6395%" y="143.50">slabmap...</text></g><g><title>slabmap.exe`core::core_arch::x86::avx2::_mm256_xor_si256 (3 samples, 0.44%)</title><rect x="95.2035%" y="117" width="0.4360%" height="15" fill="rgb(206,201,31)" fg:x="655" fg:w="3"/><text x="95.4535%" y="127.50"></text></g><g><title>slabmap.exe`chacha20::backends::avx2::cols_to_rows (2 samples, 0.29%)</title><rect x="95.6395%" y="133" width="0.2907%" height="15" fill="rgb(231,57,52)" fg:x="658" fg:w="2"/><text x="95.8895%" y="143.50"></text></g><g><title>slabmap.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi32 (2 samples, 0.29%)</title><rect x="95.6395%" y="117" width="0.2907%" height="15" fill="rgb(248,177,22)" fg:x="658" fg:w="2"/><text x="95.8895%" y="127.50"></text></g><g><title>slabmap.exe`chacha20::backends::avx2::rounds (49 samples, 7.12%)</title><rect x="89.3895%" y="165" width="7.1221%" height="15" fill="rgb(215,211,37)" fg:x="615" fg:w="49"/><text x="89.6395%" y="175.50">slabmap.ex..</text></g><g><title>slabmap.exe`chacha20::backends::avx2::double_quarter_round (49 samples, 7.12%)</title><rect x="89.3895%" y="149" width="7.1221%" height="15" fill="rgb(241,128,51)" fg:x="615" fg:w="49"/><text x="89.6395%" y="159.50">slabmap.ex..</text></g><g><title>slabmap.exe`chacha20::backends::avx2::rows_to_cols (4 samples, 0.58%)</title><rect x="95.9302%" y="133" width="0.5814%" height="15" fill="rgb(227,165,31)" fg:x="660" fg:w="4"/><text x="96.1802%" y="143.50"></text></g><g><title>slabmap.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi32 (4 samples, 0.58%)</title><rect x="95.9302%" y="117" width="0.5814%" height="15" fill="rgb(228,167,24)" fg:x="660" fg:w="4"/><text x="96.1802%" y="127.50"></text></g><g><title>slabmap.exe`chacha20::backends::avx2::Backend&lt;chacha20::R12,enum2$&lt;chacha20::variants::Legacy&gt; &gt;::rng_gen_par_ks_blocks (54 samples, 7.85%)</title><rect x="89.3895%" y="181" width="7.8488%" height="15" fill="rgb(228,143,12)" fg:x="615" fg:w="54"/><text x="89.6395%" y="191.50">slabmap.exe..</text></g><g><title>slabmap.exe`core::core_arch::x86::sse2::_mm_storeu_si128 (5 samples, 0.73%)</title><rect x="96.5116%" y="165" width="0.7267%" height="15" fill="rgb(249,149,8)" fg:x="664" fg:w="5"/><text x="96.7616%" y="175.50"></text></g><g><title>slabmap.exe`core::ptr::mut_ptr::impl$0::write_unaligned (5 samples, 0.73%)</title><rect x="96.5116%" y="149" width="0.7267%" height="15" fill="rgb(243,35,44)" fg:x="664" fg:w="5"/><text x="96.7616%" y="159.50"></text></g><g><title>slabmap.exe`core::ptr::write_unaligned (5 samples, 0.73%)</title><rect x="96.5116%" y="133" width="0.7267%" height="15" fill="rgb(246,89,9)" fg:x="664" fg:w="5"/><text x="96.7616%" y="143.50"></text></g><g><title>slabmap.exe`core::ptr::copy_nonoverlapping (5 samples, 0.73%)</title><rect x="96.5116%" y="117" width="0.7267%" height="15" fill="rgb(233,213,13)" fg:x="664" fg:w="5"/><text x="96.7616%" y="127.50"></text></g><g><title>`0x7FF8291FCC91 (669 samples, 97.24%)</title><rect x="0.2907%" y="565" width="97.2384%" height="15" fill="rgb(233,141,41)" fg:x="2" fg:w="669"/><text x="0.5407%" y="575.50">`0x7FF8291FCC91</text></g><g><title>`0x7FF8273E7374 (669 samples, 97.24%)</title><rect x="0.2907%" y="549" width="97.2384%" height="15" fill="rgb(239,167,4)" fg:x="2" fg:w="669"/><text x="0.5407%" y="559.50">`0x7FF8273E7374</text></g><g><title>slabmap.exe`__scrt_common_main_seh() (664 samples, 96.51%)</title><rect x="1.0174%" y="533" width="96.5116%" height="15" fill="rgb(209,217,16)" fg:x="7" fg:w="664"/><text x="1.2674%" y="543.50">slabmap.exe`__scrt_common_main_seh()</text></g><g><title>slabmap.exe`invoke_main() (657 samples, 95.49%)</title><rect x="2.0349%" y="517" width="95.4942%" height="15" fill="rgb(219,88,35)" fg:x="14" fg:w="657"/><text x="2.2849%" y="527.50">slabmap.exe`invoke_main()</text></g><g><title>slabmap.exe`main (657 samples, 95.49%)</title><rect x="2.0349%" y="501" width="95.4942%" height="15" fill="rgb(220,193,23)" fg:x="14" fg:w="657"/><text x="2.2849%" y="511.50">slabmap.exe`main</text></g><g><title>slabmap.exe`std::rt::lang_start_internal (657 samples, 95.49%)</title><rect x="2.0349%" y="485" width="95.4942%" height="15" fill="rgb(230,90,52)" fg:x="14" fg:w="657"/><text x="2.2849%" y="495.50">slabmap.exe`std::rt::lang_start_internal</text></g><g><title>slabmap.exe`std::panic::catch_unwind (657 samples, 95.49%)</title><rect x="2.0349%" y="469" width="95.4942%" height="15" fill="rgb(252,106,19)" fg:x="14" fg:w="657"/><text x="2.2849%" y="479.50">slabmap.exe`std::panic::catch_unwind</text></g><g><title>slabmap.exe`std::panicking::catch_unwind (657 samples, 95.49%)</title><rect x="2.0349%" y="453" width="95.4942%" height="15" fill="rgb(206,74,20)" fg:x="14" fg:w="657"/><text x="2.2849%" y="463.50">slabmap.exe`std::panicking::catch_unwind</text></g><g><title>slabmap.exe`std::panicking::catch_unwind::do_call (657 samples, 95.49%)</title><rect x="2.0349%" y="437" width="95.4942%" height="15" fill="rgb(230,138,44)" fg:x="14" fg:w="657"/><text x="2.2849%" y="447.50">slabmap.exe`std::panicking::catch_unwind::do_call</text></g><g><title>slabmap.exe`std::rt::lang_start_internal::closure$0 (657 samples, 95.49%)</title><rect x="2.0349%" y="421" width="95.4942%" height="15" fill="rgb(235,182,43)" fg:x="14" fg:w="657"/><text x="2.2849%" y="431.50">slabmap.exe`std::rt::lang_start_internal::closure$0</text></g><g><title>slabmap.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (656 samples, 95.35%)</title><rect x="2.1802%" y="405" width="95.3488%" height="15" fill="rgb(242,16,51)" fg:x="15" fg:w="656"/><text x="2.4302%" y="415.50">slabmap.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>slabmap.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (656 samples, 95.35%)</title><rect x="2.1802%" y="389" width="95.3488%" height="15" fill="rgb(248,9,4)" fg:x="15" fg:w="656"/><text x="2.4302%" y="399.50">slabmap.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>slabmap.exe`slabmap::main (656 samples, 95.35%)</title><rect x="2.1802%" y="373" width="95.3488%" height="15" fill="rgb(210,31,22)" fg:x="15" fg:w="656"/><text x="2.4302%" y="383.50">slabmap.exe`slabmap::main</text></g><g><title>slabmap.exe`rand::rng::Rng::sample&lt;rand::rngs::thread::ThreadRng,bool,rand::distr::bernoulli::Bernoulli&gt; (112 samples, 16.28%)</title><rect x="81.2500%" y="357" width="16.2791%" height="15" fill="rgb(239,54,39)" fg:x="559" fg:w="112"/><text x="81.5000%" y="367.50">slabmap.exe`rand::rng::Rn..</text></g><g><title>slabmap.exe`rand::distr::bernoulli::impl$3::sample (88 samples, 12.79%)</title><rect x="84.7384%" y="341" width="12.7907%" height="15" fill="rgb(230,99,41)" fg:x="583" fg:w="88"/><text x="84.9884%" y="351.50">slabmap.exe`rand::d..</text></g><g><title>slabmap.exe`rand::rng::Rng::random (82 samples, 11.92%)</title><rect x="85.6105%" y="325" width="11.9186%" height="15" fill="rgb(253,106,12)" fg:x="589" fg:w="82"/><text x="85.8605%" y="335.50">slabmap.exe`rand::..</text></g><g><title>slabmap.exe`rand::distr::integer::impl$3::sample (82 samples, 11.92%)</title><rect x="85.6105%" y="309" width="11.9186%" height="15" fill="rgb(213,46,41)" fg:x="589" fg:w="82"/><text x="85.8605%" y="319.50">slabmap.exe`rand::..</text></g><g><title>slabmap.exe`rand::rngs::thread::impl$3::next_u64 (82 samples, 11.92%)</title><rect x="85.6105%" y="293" width="11.9186%" height="15" fill="rgb(215,133,35)" fg:x="589" fg:w="82"/><text x="85.8605%" y="303.50">slabmap.exe`rand::..</text></g><g><title>slabmap.exe`rand::rngs::reseeding::impl$1::next_u64(rand::rngs::reseeding::ReseedingRng (81 samples, 11.77%)</title><rect x="85.7558%" y="277" width="11.7733%" height="15" fill="rgb(213,28,5)" fg:x="590" fg:w="81"/><text x="86.0058%" y="287.50">slabmap.exe`rand:..</text></g><g><title>slabmap.exe`rand_core::block::impl$2::next_u64(rand_core::block::BlockRng&lt;rand::rngs::reseeding::ReseedingCore (81 samples, 11.77%)</title><rect x="85.7558%" y="261" width="11.7733%" height="15" fill="rgb(215,77,49)" fg:x="590" fg:w="81"/><text x="86.0058%" y="271.50">slabmap.exe`rand_..</text></g><g><title>slabmap.exe`rand_core::block::BlockRng&lt;rand::rngs::reseeding::ReseedingCore&lt;chacha20::rng::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (67 samples, 9.74%)</title><rect x="87.7907%" y="245" width="9.7384%" height="15" fill="rgb(248,100,22)" fg:x="604" fg:w="67"/><text x="88.0407%" y="255.50">slabmap.exe`ra..</text></g><g><title>slabmap.exe`rand::rngs::reseeding::impl$4::generate(rand::rngs::reseeding::ReseedingCore (65 samples, 9.45%)</title><rect x="88.0814%" y="229" width="9.4477%" height="15" fill="rgb(208,67,9)" fg:x="606" fg:w="65"/><text x="88.3314%" y="239.50">slabmap.exe`ra..</text></g><g><title>slabmap.exe`chacha20::rng::impl$42::generate (60 samples, 8.72%)</title><rect x="88.8081%" y="213" width="8.7209%" height="15" fill="rgb(219,133,21)" fg:x="611" fg:w="60"/><text x="89.0581%" y="223.50">slabmap.exe`..</text></g><g><title>slabmap.exe`chacha20::backends::avx2::rng_inner&lt;chacha20::R12,enum2$&lt;chacha20::variants::Legacy&gt; &gt;(chacha20::ChaChaCore&lt;chacha20::R12,enum2$ (58 samples, 8.43%)</title><rect x="89.0988%" y="197" width="8.4302%" height="15" fill="rgb(246,46,29)" fg:x="613" fg:w="58"/><text x="89.3488%" y="207.50">slabmap.exe`..</text></g><g><title>slabmap.exe`core::core_arch::x86::avx2::_mm256_add_epi64 (2 samples, 0.29%)</title><rect x="97.2384%" y="181" width="0.2907%" height="15" fill="rgb(246,185,52)" fg:x="669" fg:w="2"/><text x="97.4884%" y="191.50"></text></g><g><title>`0x7FF8292826BC (1 samples, 0.15%)</title><rect x="97.5291%" y="517" width="0.1453%" height="15" fill="rgb(252,136,11)" fg:x="671" fg:w="1"/><text x="97.7791%" y="527.50"></text></g><g><title>`0x7FF8292A2620 (1 samples, 0.15%)</title><rect x="97.5291%" y="501" width="0.1453%" height="15" fill="rgb(219,138,53)" fg:x="671" fg:w="1"/><text x="97.7791%" y="511.50"></text></g><g><title>`0x7FF8291F4739 (1 samples, 0.15%)</title><rect x="97.5291%" y="485" width="0.1453%" height="15" fill="rgb(211,51,23)" fg:x="671" fg:w="1"/><text x="97.7791%" y="495.50"></text></g><g><title>`0x7FF8291F38C0 (1 samples, 0.15%)</title><rect x="97.5291%" y="469" width="0.1453%" height="15" fill="rgb(247,221,28)" fg:x="671" fg:w="1"/><text x="97.7791%" y="479.50"></text></g><g><title>`0x7FF82922D612 (1 samples, 0.15%)</title><rect x="97.5291%" y="453" width="0.1453%" height="15" fill="rgb(251,222,45)" fg:x="671" fg:w="1"/><text x="97.7791%" y="463.50"></text></g><g><title>`0x7FF82924D734 (1 samples, 0.15%)</title><rect x="97.5291%" y="437" width="0.1453%" height="15" fill="rgb(217,162,53)" fg:x="671" fg:w="1"/><text x="97.7791%" y="447.50"></text></g><g><title>`0x7FF82928331C (1 samples, 0.15%)</title><rect x="97.6744%" y="517" width="0.1453%" height="15" fill="rgb(229,93,14)" fg:x="672" fg:w="1"/><text x="97.9244%" y="527.50"></text></g><g><title>`0x7FF8291BFA99 (1 samples, 0.15%)</title><rect x="97.6744%" y="501" width="0.1453%" height="15" fill="rgb(209,67,49)" fg:x="672" fg:w="1"/><text x="97.9244%" y="511.50"></text></g><g><title>`0x7FF8291C06A3 (1 samples, 0.15%)</title><rect x="97.6744%" y="485" width="0.1453%" height="15" fill="rgb(213,87,29)" fg:x="672" fg:w="1"/><text x="97.9244%" y="495.50"></text></g><g><title>`0x7FF8291C79D2 (1 samples, 0.15%)</title><rect x="97.8198%" y="405" width="0.1453%" height="15" fill="rgb(205,151,52)" fg:x="673" fg:w="1"/><text x="98.0698%" y="415.50"></text></g><g><title>`0x7FF8291C5082 (1 samples, 0.15%)</title><rect x="97.8198%" y="389" width="0.1453%" height="15" fill="rgb(253,215,39)" fg:x="673" fg:w="1"/><text x="98.0698%" y="399.50"></text></g><g><title>`0x7FF82924DEF4 (1 samples, 0.15%)</title><rect x="97.8198%" y="373" width="0.1453%" height="15" fill="rgb(221,220,41)" fg:x="673" fg:w="1"/><text x="98.0698%" y="383.50"></text></g><g><title>`0x7FF8291C7AD9 (1 samples, 0.15%)</title><rect x="97.9651%" y="405" width="0.1453%" height="15" fill="rgb(218,133,21)" fg:x="674" fg:w="1"/><text x="98.2151%" y="415.50"></text></g><g><title>`0x7FF8291CFB31 (3 samples, 0.44%)</title><rect x="97.8198%" y="469" width="0.4360%" height="15" fill="rgb(221,193,43)" fg:x="673" fg:w="3"/><text x="98.0698%" y="479.50"></text></g><g><title>`0x7FF82921C2ED (3 samples, 0.44%)</title><rect x="97.8198%" y="453" width="0.4360%" height="15" fill="rgb(240,128,52)" fg:x="673" fg:w="3"/><text x="98.0698%" y="463.50"></text></g><g><title>`0x7FF8291C4479 (3 samples, 0.44%)</title><rect x="97.8198%" y="437" width="0.4360%" height="15" fill="rgb(253,114,12)" fg:x="673" fg:w="3"/><text x="98.0698%" y="447.50"></text></g><g><title>`0x7FF8291C4C14 (3 samples, 0.44%)</title><rect x="97.8198%" y="421" width="0.4360%" height="15" fill="rgb(215,223,47)" fg:x="673" fg:w="3"/><text x="98.0698%" y="431.50"></text></g><g><title>`0x7FF8291C7BC4 (1 samples, 0.15%)</title><rect x="98.1105%" y="405" width="0.1453%" height="15" fill="rgb(248,225,23)" fg:x="675" fg:w="1"/><text x="98.3605%" y="415.50"></text></g><g><title>`0x7FF8291E26CF (1 samples, 0.15%)</title><rect x="98.1105%" y="389" width="0.1453%" height="15" fill="rgb(250,108,0)" fg:x="675" fg:w="1"/><text x="98.3605%" y="399.50"></text></g><g><title>`0x7FF826C898C7 (1 samples, 0.15%)</title><rect x="98.2558%" y="357" width="0.1453%" height="15" fill="rgb(228,208,7)" fg:x="676" fg:w="1"/><text x="98.5058%" y="367.50"></text></g><g><title>`0x7FF826C8B116 (1 samples, 0.15%)</title><rect x="98.2558%" y="341" width="0.1453%" height="15" fill="rgb(244,45,10)" fg:x="676" fg:w="1"/><text x="98.5058%" y="351.50"></text></g><g><title>`0x7FF8291B8EF2 (1 samples, 0.15%)</title><rect x="98.2558%" y="325" width="0.1453%" height="15" fill="rgb(207,125,25)" fg:x="676" fg:w="1"/><text x="98.5058%" y="335.50"></text></g><g><title>`0x7FF8291B9195 (1 samples, 0.15%)</title><rect x="98.2558%" y="309" width="0.1453%" height="15" fill="rgb(210,195,18)" fg:x="676" fg:w="1"/><text x="98.5058%" y="319.50"></text></g><g><title>`0x7FF82924DE34 (1 samples, 0.15%)</title><rect x="98.2558%" y="293" width="0.1453%" height="15" fill="rgb(249,80,12)" fg:x="676" fg:w="1"/><text x="98.5058%" y="303.50"></text></g><g><title>`0x7FF826C8954D (2 samples, 0.29%)</title><rect x="98.2558%" y="373" width="0.2907%" height="15" fill="rgb(221,65,9)" fg:x="676" fg:w="2"/><text x="98.5058%" y="383.50"></text></g><g><title>`0x7FF826C89AE2 (1 samples, 0.15%)</title><rect x="98.4012%" y="357" width="0.1453%" height="15" fill="rgb(235,49,36)" fg:x="677" fg:w="1"/><text x="98.6512%" y="367.50"></text></g><g><title>`0x7FF826C8A9CC (1 samples, 0.15%)</title><rect x="98.4012%" y="341" width="0.1453%" height="15" fill="rgb(225,32,20)" fg:x="677" fg:w="1"/><text x="98.6512%" y="351.50"></text></g><g><title>`0x7FF826C8AA51 (1 samples, 0.15%)</title><rect x="98.4012%" y="325" width="0.1453%" height="15" fill="rgb(215,141,46)" fg:x="677" fg:w="1"/><text x="98.6512%" y="335.50"></text></g><g><title>`0x7FF826C8AE6E (1 samples, 0.15%)</title><rect x="98.4012%" y="309" width="0.1453%" height="15" fill="rgb(250,160,47)" fg:x="677" fg:w="1"/><text x="98.6512%" y="319.50"></text></g><g><title>`0x7FF826C8AF01 (1 samples, 0.15%)</title><rect x="98.4012%" y="293" width="0.1453%" height="15" fill="rgb(216,222,40)" fg:x="677" fg:w="1"/><text x="98.6512%" y="303.50"></text></g><g><title>`0x7FF826C89577 (1 samples, 0.15%)</title><rect x="98.5465%" y="373" width="0.1453%" height="15" fill="rgb(234,217,39)" fg:x="678" fg:w="1"/><text x="98.7965%" y="383.50"></text></g><g><title>`0x7FF826CD5D72 (1 samples, 0.15%)</title><rect x="98.5465%" y="357" width="0.1453%" height="15" fill="rgb(207,178,40)" fg:x="678" fg:w="1"/><text x="98.7965%" y="367.50"></text></g><g><title>`0x7FF826CD50BE (1 samples, 0.15%)</title><rect x="98.5465%" y="341" width="0.1453%" height="15" fill="rgb(221,136,13)" fg:x="678" fg:w="1"/><text x="98.7965%" y="351.50"></text></g><g><title>`0x7FF826CD352D (1 samples, 0.15%)</title><rect x="98.5465%" y="325" width="0.1453%" height="15" fill="rgb(249,199,10)" fg:x="678" fg:w="1"/><text x="98.7965%" y="335.50"></text></g><g><title>`0x7FF826CD30AC (1 samples, 0.15%)</title><rect x="98.5465%" y="309" width="0.1453%" height="15" fill="rgb(249,222,13)" fg:x="678" fg:w="1"/><text x="98.7965%" y="319.50"></text></g><g><title>`0x7FF826C672A8 (1 samples, 0.15%)</title><rect x="98.5465%" y="293" width="0.1453%" height="15" fill="rgb(244,185,38)" fg:x="678" fg:w="1"/><text x="98.7965%" y="303.50"></text></g><g><title>`0x7FF82924EB64 (1 samples, 0.15%)</title><rect x="98.5465%" y="277" width="0.1453%" height="15" fill="rgb(236,202,9)" fg:x="678" fg:w="1"/><text x="98.7965%" y="287.50"></text></g><g><title>`0x7FF826C8957E (1 samples, 0.15%)</title><rect x="98.6919%" y="373" width="0.1453%" height="15" fill="rgb(250,229,37)" fg:x="679" fg:w="1"/><text x="98.9419%" y="383.50"></text></g><g><title>`0x7FF826CD6567 (1 samples, 0.15%)</title><rect x="98.6919%" y="357" width="0.1453%" height="15" fill="rgb(206,174,23)" fg:x="679" fg:w="1"/><text x="98.9419%" y="367.50"></text></g><g><title>`0x7FF826CF2DCE (1 samples, 0.15%)</title><rect x="98.6919%" y="341" width="0.1453%" height="15" fill="rgb(211,33,43)" fg:x="679" fg:w="1"/><text x="98.9419%" y="351.50"></text></g><g><title>`0x7FF826CD8C05 (1 samples, 0.15%)</title><rect x="98.6919%" y="325" width="0.1453%" height="15" fill="rgb(245,58,50)" fg:x="679" fg:w="1"/><text x="98.9419%" y="335.50"></text></g><g><title>`0x7FF826CE5363 (1 samples, 0.15%)</title><rect x="98.6919%" y="309" width="0.1453%" height="15" fill="rgb(244,68,36)" fg:x="679" fg:w="1"/><text x="98.9419%" y="319.50"></text></g><g><title>`0x7FF826CF01EB (1 samples, 0.15%)</title><rect x="98.6919%" y="293" width="0.1453%" height="15" fill="rgb(232,229,15)" fg:x="679" fg:w="1"/><text x="98.9419%" y="303.50"></text></g><g><title>`0x7FF826CE8445 (1 samples, 0.15%)</title><rect x="98.6919%" y="277" width="0.1453%" height="15" fill="rgb(254,30,23)" fg:x="679" fg:w="1"/><text x="98.9419%" y="287.50"></text></g><g><title>`0x7FF826D29647 (1 samples, 0.15%)</title><rect x="98.6919%" y="261" width="0.1453%" height="15" fill="rgb(235,160,14)" fg:x="679" fg:w="1"/><text x="98.9419%" y="271.50"></text></g><g><title>`0x7FF826CD504E (1 samples, 0.15%)</title><rect x="98.6919%" y="245" width="0.1453%" height="15" fill="rgb(212,155,44)" fg:x="679" fg:w="1"/><text x="98.9419%" y="255.50"></text></g><g><title>`0x7FF826CD365B (1 samples, 0.15%)</title><rect x="98.6919%" y="229" width="0.1453%" height="15" fill="rgb(226,2,50)" fg:x="679" fg:w="1"/><text x="98.9419%" y="239.50"></text></g><g><title>`0x7FF826CD3726 (1 samples, 0.15%)</title><rect x="98.6919%" y="213" width="0.1453%" height="15" fill="rgb(234,177,6)" fg:x="679" fg:w="1"/><text x="98.9419%" y="223.50"></text></g><g><title>`0x7FF826CD631C (1 samples, 0.15%)</title><rect x="98.6919%" y="197" width="0.1453%" height="15" fill="rgb(217,24,9)" fg:x="679" fg:w="1"/><text x="98.9419%" y="207.50"></text></g><g><title>`0x7FF8291F249E (1 samples, 0.15%)</title><rect x="98.6919%" y="181" width="0.1453%" height="15" fill="rgb(220,13,46)" fg:x="679" fg:w="1"/><text x="98.9419%" y="191.50"></text></g><g><title>`0x7FF8291F2589 (1 samples, 0.15%)</title><rect x="98.6919%" y="165" width="0.1453%" height="15" fill="rgb(239,221,27)" fg:x="679" fg:w="1"/><text x="98.9419%" y="175.50"></text></g><g><title>`0x7FF8291F267F (1 samples, 0.15%)</title><rect x="98.6919%" y="149" width="0.1453%" height="15" fill="rgb(222,198,25)" fg:x="679" fg:w="1"/><text x="98.9419%" y="159.50"></text></g><g><title>`0x7FF8292837CE (8 samples, 1.16%)</title><rect x="97.8198%" y="517" width="1.1628%" height="15" fill="rgb(211,99,13)" fg:x="673" fg:w="8"/><text x="98.0698%" y="527.50"></text></g><g><title>`0x7FF8291C6AF4 (8 samples, 1.16%)</title><rect x="97.8198%" y="501" width="1.1628%" height="15" fill="rgb(232,111,31)" fg:x="673" fg:w="8"/><text x="98.0698%" y="511.50"></text></g><g><title>`0x7FF8291C73E4 (8 samples, 1.16%)</title><rect x="97.8198%" y="485" width="1.1628%" height="15" fill="rgb(245,82,37)" fg:x="673" fg:w="8"/><text x="98.0698%" y="495.50"></text></g><g><title>`0x7FF8291CFBAE (5 samples, 0.73%)</title><rect x="98.2558%" y="469" width="0.7267%" height="15" fill="rgb(227,149,46)" fg:x="676" fg:w="5"/><text x="98.5058%" y="479.50"></text></g><g><title>`0x7FF8291ED947 (5 samples, 0.73%)</title><rect x="98.2558%" y="453" width="0.7267%" height="15" fill="rgb(218,36,50)" fg:x="676" fg:w="5"/><text x="98.5058%" y="463.50"></text></g><g><title>`0x7FF82921D110 (5 samples, 0.73%)</title><rect x="98.2558%" y="437" width="0.7267%" height="15" fill="rgb(226,80,48)" fg:x="676" fg:w="5"/><text x="98.5058%" y="447.50"></text></g><g><title>`0x7FF82921D08A (5 samples, 0.73%)</title><rect x="98.2558%" y="421" width="0.7267%" height="15" fill="rgb(238,224,15)" fg:x="676" fg:w="5"/><text x="98.5058%" y="431.50"></text></g><g><title>`0x7FF82921D2F7 (5 samples, 0.73%)</title><rect x="98.2558%" y="405" width="0.7267%" height="15" fill="rgb(241,136,10)" fg:x="676" fg:w="5"/><text x="98.5058%" y="415.50"></text></g><g><title>`0x7FF8291C9A1D (5 samples, 0.73%)</title><rect x="98.2558%" y="389" width="0.7267%" height="15" fill="rgb(208,32,45)" fg:x="676" fg:w="5"/><text x="98.5058%" y="399.50"></text></g><g><title>`0x7FF826C89598 (1 samples, 0.15%)</title><rect x="98.8372%" y="373" width="0.1453%" height="15" fill="rgb(207,135,9)" fg:x="680" fg:w="1"/><text x="99.0872%" y="383.50"></text></g><g><title>`0x7FF826C8B1FA (1 samples, 0.15%)</title><rect x="98.8372%" y="357" width="0.1453%" height="15" fill="rgb(206,86,44)" fg:x="680" fg:w="1"/><text x="99.0872%" y="367.50"></text></g><g><title>`0x7FF826CB202B (1 samples, 0.15%)</title><rect x="98.8372%" y="341" width="0.1453%" height="15" fill="rgb(245,177,15)" fg:x="680" fg:w="1"/><text x="99.0872%" y="351.50"></text></g><g><title>`0x7FF8291F2EA0 (1 samples, 0.15%)</title><rect x="98.8372%" y="325" width="0.1453%" height="15" fill="rgb(206,64,50)" fg:x="680" fg:w="1"/><text x="99.0872%" y="335.50"></text></g><g><title>`0x7FF8291F30E5 (1 samples, 0.15%)</title><rect x="98.8372%" y="309" width="0.1453%" height="15" fill="rgb(234,36,40)" fg:x="680" fg:w="1"/><text x="99.0872%" y="319.50"></text></g><g><title>`0x7FF8291F2FB8 (1 samples, 0.15%)</title><rect x="98.8372%" y="293" width="0.1453%" height="15" fill="rgb(213,64,8)" fg:x="680" fg:w="1"/><text x="99.0872%" y="303.50"></text></g><g><title>`0x7FF8291F35FD (1 samples, 0.15%)</title><rect x="98.8372%" y="277" width="0.1453%" height="15" fill="rgb(210,75,36)" fg:x="680" fg:w="1"/><text x="99.0872%" y="287.50"></text></g><g><title>`0x7FF82928389D (1 samples, 0.15%)</title><rect x="98.9826%" y="517" width="0.1453%" height="15" fill="rgb(229,88,21)" fg:x="681" fg:w="1"/><text x="99.2326%" y="527.50"></text></g><g><title>`0x7FF8291C70A6 (1 samples, 0.15%)</title><rect x="98.9826%" y="501" width="0.1453%" height="15" fill="rgb(252,204,47)" fg:x="681" fg:w="1"/><text x="99.2326%" y="511.50"></text></g><g><title>`0x7FF8291C01FD (1 samples, 0.15%)</title><rect x="98.9826%" y="485" width="0.1453%" height="15" fill="rgb(208,77,27)" fg:x="681" fg:w="1"/><text x="99.2326%" y="495.50"></text></g><g><title>`0x7FF8291C0446 (1 samples, 0.15%)</title><rect x="98.9826%" y="469" width="0.1453%" height="15" fill="rgb(221,76,26)" fg:x="681" fg:w="1"/><text x="99.2326%" y="479.50"></text></g><g><title>`0x7FF8291E20F9 (1 samples, 0.15%)</title><rect x="98.9826%" y="453" width="0.1453%" height="15" fill="rgb(225,139,18)" fg:x="681" fg:w="1"/><text x="99.2326%" y="463.50"></text></g><g><title>`0x7FF82920419C (1 samples, 0.15%)</title><rect x="98.9826%" y="437" width="0.1453%" height="15" fill="rgb(230,137,11)" fg:x="681" fg:w="1"/><text x="99.2326%" y="447.50"></text></g><g><title>`0x7FF82924DEF4 (1 samples, 0.15%)</title><rect x="98.9826%" y="421" width="0.1453%" height="15" fill="rgb(212,28,1)" fg:x="681" fg:w="1"/><text x="99.2326%" y="431.50"></text></g><g><title>`0x7FF829283B18 (1 samples, 0.15%)</title><rect x="99.1279%" y="517" width="0.1453%" height="15" fill="rgb(248,164,17)" fg:x="682" fg:w="1"/><text x="99.3779%" y="527.50"></text></g><g><title>`0x7FF829212B2B (1 samples, 0.15%)</title><rect x="99.1279%" y="501" width="0.1453%" height="15" fill="rgb(222,171,42)" fg:x="682" fg:w="1"/><text x="99.3779%" y="511.50"></text></g><g><title>`0x7FF829212FE4 (1 samples, 0.15%)</title><rect x="99.1279%" y="485" width="0.1453%" height="15" fill="rgb(243,84,45)" fg:x="682" fg:w="1"/><text x="99.3779%" y="495.50"></text></g><g><title>`0x7FF82924EE84 (1 samples, 0.15%)</title><rect x="99.1279%" y="469" width="0.1453%" height="15" fill="rgb(252,49,23)" fg:x="682" fg:w="1"/><text x="99.3779%" y="479.50"></text></g><g><title>`0x7FF8291C7B29 (1 samples, 0.15%)</title><rect x="99.2733%" y="437" width="0.1453%" height="15" fill="rgb(215,19,7)" fg:x="683" fg:w="1"/><text x="99.5233%" y="447.50"></text></g><g><title>`0x7FF8291C7D31 (1 samples, 0.15%)</title><rect x="99.2733%" y="421" width="0.1453%" height="15" fill="rgb(238,81,41)" fg:x="683" fg:w="1"/><text x="99.5233%" y="431.50"></text></g><g><title>`0x7FF8291C9763 (1 samples, 0.15%)</title><rect x="99.2733%" y="405" width="0.1453%" height="15" fill="rgb(210,199,37)" fg:x="683" fg:w="1"/><text x="99.5233%" y="415.50"></text></g><g><title>`0x7FF829283B6D (2 samples, 0.29%)</title><rect x="99.2733%" y="517" width="0.2907%" height="15" fill="rgb(244,192,49)" fg:x="683" fg:w="2"/><text x="99.5233%" y="527.50"></text></g><g><title>`0x7FF8291C7B29 (2 samples, 0.29%)</title><rect x="99.2733%" y="501" width="0.2907%" height="15" fill="rgb(226,211,11)" fg:x="683" fg:w="2"/><text x="99.5233%" y="511.50"></text></g><g><title>`0x7FF8291C88A8 (2 samples, 0.29%)</title><rect x="99.2733%" y="485" width="0.2907%" height="15" fill="rgb(236,162,54)" fg:x="683" fg:w="2"/><text x="99.5233%" y="495.50"></text></g><g><title>`0x7FF8291C4479 (2 samples, 0.29%)</title><rect x="99.2733%" y="469" width="0.2907%" height="15" fill="rgb(220,229,9)" fg:x="683" fg:w="2"/><text x="99.5233%" y="479.50"></text></g><g><title>`0x7FF8291C4C14 (2 samples, 0.29%)</title><rect x="99.2733%" y="453" width="0.2907%" height="15" fill="rgb(250,87,22)" fg:x="683" fg:w="2"/><text x="99.5233%" y="463.50"></text></g><g><title>`0x7FF8291C7BA2 (1 samples, 0.15%)</title><rect x="99.4186%" y="437" width="0.1453%" height="15" fill="rgb(239,43,17)" fg:x="684" fg:w="1"/><text x="99.6686%" y="447.50"></text></g><g><title>`0x7FF8291BF49F (1 samples, 0.15%)</title><rect x="99.4186%" y="421" width="0.1453%" height="15" fill="rgb(231,177,25)" fg:x="684" fg:w="1"/><text x="99.6686%" y="431.50"></text></g><g><title>`0x7FF8291C2A66 (1 samples, 0.15%)</title><rect x="99.4186%" y="405" width="0.1453%" height="15" fill="rgb(219,179,1)" fg:x="684" fg:w="1"/><text x="99.6686%" y="415.50"></text></g><g><title>`0x7FF8291C2BD9 (1 samples, 0.15%)</title><rect x="99.4186%" y="389" width="0.1453%" height="15" fill="rgb(238,219,53)" fg:x="684" fg:w="1"/><text x="99.6686%" y="399.50"></text></g><g><title>`0x7FF829250304 (1 samples, 0.15%)</title><rect x="99.4186%" y="373" width="0.1453%" height="15" fill="rgb(232,167,36)" fg:x="684" fg:w="1"/><text x="99.6686%" y="383.50"></text></g><g><title>`0x7FF82921D08A (1 samples, 0.15%)</title><rect x="99.5640%" y="485" width="0.1453%" height="15" fill="rgb(244,19,51)" fg:x="685" fg:w="1"/><text x="99.8140%" y="495.50"></text></g><g><title>`0x7FF82921D2F7 (1 samples, 0.15%)</title><rect x="99.5640%" y="469" width="0.1453%" height="15" fill="rgb(224,6,22)" fg:x="685" fg:w="1"/><text x="99.8140%" y="479.50"></text></g><g><title>`0x7FF8291C9A1D (1 samples, 0.15%)</title><rect x="99.5640%" y="453" width="0.1453%" height="15" fill="rgb(224,145,5)" fg:x="685" fg:w="1"/><text x="99.8140%" y="463.50"></text></g><g><title>`0x7FF826BE8C59 (1 samples, 0.15%)</title><rect x="99.5640%" y="437" width="0.1453%" height="15" fill="rgb(234,130,49)" fg:x="685" fg:w="1"/><text x="99.8140%" y="447.50"></text></g><g><title>`0x7FF826BCF96D (1 samples, 0.15%)</title><rect x="99.5640%" y="421" width="0.1453%" height="15" fill="rgb(254,6,2)" fg:x="685" fg:w="1"/><text x="99.8140%" y="431.50"></text></g><g><title>`0x7FF8291F2AAA (1 samples, 0.15%)</title><rect x="99.5640%" y="405" width="0.1453%" height="15" fill="rgb(208,96,46)" fg:x="685" fg:w="1"/><text x="99.8140%" y="415.50"></text></g><g><title>`0x7FF8291F30E5 (1 samples, 0.15%)</title><rect x="99.5640%" y="389" width="0.1453%" height="15" fill="rgb(239,3,39)" fg:x="685" fg:w="1"/><text x="99.8140%" y="399.50"></text></g><g><title>`0x7FF8291F2F86 (1 samples, 0.15%)</title><rect x="99.5640%" y="373" width="0.1453%" height="15" fill="rgb(233,210,1)" fg:x="685" fg:w="1"/><text x="99.8140%" y="383.50"></text></g><g><title>`0x7FF829250D84 (1 samples, 0.15%)</title><rect x="99.5640%" y="357" width="0.1453%" height="15" fill="rgb(244,137,37)" fg:x="685" fg:w="1"/><text x="99.8140%" y="367.50"></text></g><g><title>`0x7FF826A17711 (1 samples, 0.15%)</title><rect x="99.7093%" y="405" width="0.1453%" height="15" fill="rgb(240,136,2)" fg:x="686" fg:w="1"/><text x="99.9593%" y="415.50"></text></g><g><title>`0x7FF826A4A585 (1 samples, 0.15%)</title><rect x="99.7093%" y="389" width="0.1453%" height="15" fill="rgb(239,18,37)" fg:x="686" fg:w="1"/><text x="99.9593%" y="399.50"></text></g><g><title>all (688 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(218,185,22)" fg:x="0" fg:w="688"/><text x="0.2500%" y="591.50"></text></g><g><title>`0x7FF829225C1E (17 samples, 2.47%)</title><rect x="97.5291%" y="565" width="2.4709%" height="15" fill="rgb(225,218,4)" fg:x="671" fg:w="17"/><text x="97.7791%" y="575.50">`0..</text></g><g><title>`0x7FF829225C73 (17 samples, 2.47%)</title><rect x="97.5291%" y="549" width="2.4709%" height="15" fill="rgb(230,182,32)" fg:x="671" fg:w="17"/><text x="97.7791%" y="559.50">`0..</text></g><g><title>`0x7FF829225DEB (17 samples, 2.47%)</title><rect x="97.5291%" y="533" width="2.4709%" height="15" fill="rgb(242,56,43)" fg:x="671" fg:w="17"/><text x="97.7791%" y="543.50">`0..</text></g><g><title>`0x7FF829283CB2 (3 samples, 0.44%)</title><rect x="99.5640%" y="517" width="0.4360%" height="15" fill="rgb(233,99,24)" fg:x="685" fg:w="3"/><text x="99.8140%" y="527.50"></text></g><g><title>`0x7FF82921D110 (3 samples, 0.44%)</title><rect x="99.5640%" y="501" width="0.4360%" height="15" fill="rgb(234,209,42)" fg:x="685" fg:w="3"/><text x="99.8140%" y="511.50"></text></g><g><title>`0x7FF82921D110 (2 samples, 0.29%)</title><rect x="99.7093%" y="485" width="0.2907%" height="15" fill="rgb(227,7,12)" fg:x="686" fg:w="2"/><text x="99.9593%" y="495.50"></text></g><g><title>`0x7FF82921D08A (2 samples, 0.29%)</title><rect x="99.7093%" y="469" width="0.2907%" height="15" fill="rgb(245,203,43)" fg:x="686" fg:w="2"/><text x="99.9593%" y="479.50"></text></g><g><title>`0x7FF82921D2F7 (2 samples, 0.29%)</title><rect x="99.7093%" y="453" width="0.2907%" height="15" fill="rgb(238,205,33)" fg:x="686" fg:w="2"/><text x="99.9593%" y="463.50"></text></g><g><title>`0x7FF8291C9A1D (2 samples, 0.29%)</title><rect x="99.7093%" y="437" width="0.2907%" height="15" fill="rgb(231,56,7)" fg:x="686" fg:w="2"/><text x="99.9593%" y="447.50"></text></g><g><title>`0x7FF826A16216 (2 samples, 0.29%)</title><rect x="99.7093%" y="421" width="0.2907%" height="15" fill="rgb(244,186,29)" fg:x="686" fg:w="2"/><text x="99.9593%" y="431.50"></text></g><g><title>`0x7FF826A17730 (1 samples, 0.15%)</title><rect x="99.8547%" y="405" width="0.1453%" height="15" fill="rgb(234,111,31)" fg:x="687" fg:w="1"/><text x="100.1047%" y="415.50"></text></g><g><title>`0x7FF826A1F9C9 (1 samples, 0.15%)</title><rect x="99.8547%" y="389" width="0.1453%" height="15" fill="rgb(241,149,10)" fg:x="687" fg:w="1"/><text x="100.1047%" y="399.50"></text></g><g><title>`0x7FF826A1FA24 (1 samples, 0.15%)</title><rect x="99.8547%" y="373" width="0.1453%" height="15" fill="rgb(249,206,44)" fg:x="687" fg:w="1"/><text x="100.1047%" y="383.50"></text></g><g><title>`0x7FF826A0DC74 (1 samples, 0.15%)</title><rect x="99.8547%" y="357" width="0.1453%" height="15" fill="rgb(251,153,30)" fg:x="687" fg:w="1"/><text x="100.1047%" y="367.50"></text></g><g><title>`0x7FF826A0DD3E (1 samples, 0.15%)</title><rect x="99.8547%" y="341" width="0.1453%" height="15" fill="rgb(239,152,38)" fg:x="687" fg:w="1"/><text x="100.1047%" y="351.50"></text></g><g><title>`0x7FF8291DB44D (1 samples, 0.15%)</title><rect x="99.8547%" y="325" width="0.1453%" height="15" fill="rgb(249,139,47)" fg:x="687" fg:w="1"/><text x="100.1047%" y="335.50"></text></g><g><title>`0x7FF8291DD37A (1 samples, 0.15%)</title><rect x="99.8547%" y="309" width="0.1453%" height="15" fill="rgb(244,64,35)" fg:x="687" fg:w="1"/><text x="100.1047%" y="319.50"></text></g><g><title>`0x7FF8291F4D2F (1 samples, 0.15%)</title><rect x="99.8547%" y="293" width="0.1453%" height="15" fill="rgb(216,46,15)" fg:x="687" fg:w="1"/><text x="100.1047%" y="303.50"></text></g><g><title>`0x7FF8291F4B80 (1 samples, 0.15%)</title><rect x="99.8547%" y="277" width="0.1453%" height="15" fill="rgb(250,74,19)" fg:x="687" fg:w="1"/><text x="100.1047%" y="287.50"></text></g><g><title>`0x7FF8291F4810 (1 samples, 0.15%)</title><rect x="99.8547%" y="261" width="0.1453%" height="15" fill="rgb(249,42,33)" fg:x="687" fg:w="1"/><text x="100.1047%" y="271.50"></text></g><g><title>`0x7FF8291F4739 (1 samples, 0.15%)</title><rect x="99.8547%" y="245" width="0.1453%" height="15" fill="rgb(242,149,17)" fg:x="687" fg:w="1"/><text x="100.1047%" y="255.50"></text></g><g><title>`0x7FF8291F38C0 (1 samples, 0.15%)</title><rect x="99.8547%" y="229" width="0.1453%" height="15" fill="rgb(244,29,21)" fg:x="687" fg:w="1"/><text x="100.1047%" y="239.50"></text></g><g><title>`0x7FF82922D641 (1 samples, 0.15%)</title><rect x="99.8547%" y="213" width="0.1453%" height="15" fill="rgb(220,130,37)" fg:x="687" fg:w="1"/><text x="100.1047%" y="223.50"></text></g><g><title>`0x7FF82924D7D4 (1 samples, 0.15%)</title><rect x="99.8547%" y="197" width="0.1453%" height="15" fill="rgb(211,67,2)" fg:x="687" fg:w="1"/><text x="100.1047%" y="207.50"></text></g></svg></svg>