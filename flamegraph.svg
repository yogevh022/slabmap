<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="709.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="144"><g><title>`0x7FFA23F1CC70 (1 samples, 0.69%)</title><rect x="0.0000%" y="661" width="0.6944%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>`0x7FFA23F02714 (1 samples, 0.69%)</title><rect x="0.6944%" y="565" width="0.6944%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.9444%" y="575.50"></text></g><g><title>`0x7FFA23F30128 (2 samples, 1.39%)</title><rect x="0.6944%" y="581" width="1.3889%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="2"/><text x="0.9444%" y="591.50"></text></g><g><title>`0x7FFA23F0288A (1 samples, 0.69%)</title><rect x="1.3889%" y="565" width="0.6944%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="1.6389%" y="575.50"></text></g><g><title>`0x7FFA23F24518 (1 samples, 0.69%)</title><rect x="1.3889%" y="549" width="0.6944%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="1.6389%" y="559.50"></text></g><g><title>`0x7FFA23F6DEF4 (1 samples, 0.69%)</title><rect x="1.3889%" y="533" width="0.6944%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="1.6389%" y="543.50"></text></g><g><title>`0x7FFA23F30BD6 (1 samples, 0.69%)</title><rect x="2.0833%" y="565" width="0.6944%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="1"/><text x="2.3333%" y="575.50"></text></g><g><title>`0x7FFA23F30516 (1 samples, 0.69%)</title><rect x="2.0833%" y="549" width="0.6944%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="1"/><text x="2.3333%" y="559.50"></text></g><g><title>`0x7FFA23F306F7 (1 samples, 0.69%)</title><rect x="2.0833%" y="533" width="0.6944%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="1"/><text x="2.3333%" y="543.50"></text></g><g><title>`0x7FFA23F3086B (1 samples, 0.69%)</title><rect x="2.0833%" y="517" width="0.6944%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="1"/><text x="2.3333%" y="527.50"></text></g><g><title>`0x7FFA23F6DC94 (1 samples, 0.69%)</title><rect x="2.0833%" y="501" width="0.6944%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="1"/><text x="2.3333%" y="511.50"></text></g><g><title>`0x7FFA23F1D79A (4 samples, 2.78%)</title><rect x="0.6944%" y="629" width="2.7778%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="4"/><text x="0.9444%" y="639.50">`0..</text></g><g><title>`0x7FFA23F33720 (4 samples, 2.78%)</title><rect x="0.6944%" y="613" width="2.7778%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="4"/><text x="0.9444%" y="623.50">`0..</text></g><g><title>`0x7FFA23F300D3 (4 samples, 2.78%)</title><rect x="0.6944%" y="597" width="2.7778%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="4"/><text x="0.9444%" y="607.50">`0..</text></g><g><title>`0x7FFA23F30160 (2 samples, 1.39%)</title><rect x="2.0833%" y="581" width="1.3889%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="2"/><text x="2.3333%" y="591.50"></text></g><g><title>`0x7FFA23F30CA0 (1 samples, 0.69%)</title><rect x="2.7778%" y="565" width="0.6944%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="1"/><text x="3.0278%" y="575.50"></text></g><g><title>`0x7FFA23F311EE (1 samples, 0.69%)</title><rect x="2.7778%" y="549" width="0.6944%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="1"/><text x="3.0278%" y="559.50"></text></g><g><title>`0x7FFA23F6DE34 (1 samples, 0.69%)</title><rect x="2.7778%" y="533" width="0.6944%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="1"/><text x="3.0278%" y="543.50"></text></g><g><title>`0x7FFA216AE4C3 (1 samples, 0.69%)</title><rect x="3.4722%" y="613" width="0.6944%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="1"/><text x="3.7222%" y="623.50"></text></g><g><title>slabmap.exe`pre_c_initialization() (1 samples, 0.69%)</title><rect x="3.4722%" y="597" width="0.6944%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="1"/><text x="3.7222%" y="607.50"></text></g><g><title>`0x7FFA21694518 (1 samples, 0.69%)</title><rect x="3.4722%" y="581" width="0.6944%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="1"/><text x="3.7222%" y="591.50"></text></g><g><title>`0x7FFA216B20C0 (1 samples, 0.69%)</title><rect x="3.4722%" y="565" width="0.6944%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="1"/><text x="3.7222%" y="575.50"></text></g><g><title>`0x7FFA216B21D8 (1 samples, 0.69%)</title><rect x="3.4722%" y="549" width="0.6944%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="1"/><text x="3.7222%" y="559.50"></text></g><g><title>`0x7FFA216B223D (1 samples, 0.69%)</title><rect x="3.4722%" y="533" width="0.6944%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="1"/><text x="3.7222%" y="543.50"></text></g><g><title>`0x7FFA21810F80 (1 samples, 0.69%)</title><rect x="3.4722%" y="517" width="0.6944%" height="15" fill="rgb(241,131,45)" fg:x="5" fg:w="1"/><text x="3.7222%" y="527.50"></text></g><g><title>`0x7FFA23EE737D (1 samples, 0.69%)</title><rect x="4.1667%" y="517" width="0.6944%" height="15" fill="rgb(249,31,29)" fg:x="6" fg:w="1"/><text x="4.4167%" y="527.50"></text></g><g><title>`0x7FFA23EEA708 (1 samples, 0.69%)</title><rect x="4.1667%" y="501" width="0.6944%" height="15" fill="rgb(225,111,53)" fg:x="6" fg:w="1"/><text x="4.4167%" y="511.50"></text></g><g><title>`0x7FFA23EE4AAA (1 samples, 0.69%)</title><rect x="4.8611%" y="437" width="0.6944%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="1"/><text x="5.1111%" y="447.50"></text></g><g><title>`0x7FFA23EE4D42 (1 samples, 0.69%)</title><rect x="4.8611%" y="421" width="0.6944%" height="15" fill="rgb(214,148,48)" fg:x="7" fg:w="1"/><text x="5.1111%" y="431.50"></text></g><g><title>`0x7FFA23F6D9F4 (1 samples, 0.69%)</title><rect x="4.8611%" y="405" width="0.6944%" height="15" fill="rgb(232,36,49)" fg:x="7" fg:w="1"/><text x="5.1111%" y="415.50"></text></g><g><title>`0x7FFA23EE4AAA (1 samples, 0.69%)</title><rect x="5.5556%" y="373" width="0.6944%" height="15" fill="rgb(209,103,24)" fg:x="8" fg:w="1"/><text x="5.8056%" y="383.50"></text></g><g><title>`0x7FFA23EE4D42 (1 samples, 0.69%)</title><rect x="5.5556%" y="357" width="0.6944%" height="15" fill="rgb(229,88,8)" fg:x="8" fg:w="1"/><text x="5.8056%" y="367.50"></text></g><g><title>`0x7FFA23F6D9F4 (1 samples, 0.69%)</title><rect x="5.5556%" y="341" width="0.6944%" height="15" fill="rgb(213,181,19)" fg:x="8" fg:w="1"/><text x="5.8056%" y="351.50"></text></g><g><title>`0x7FFA23F31243 (3 samples, 2.08%)</title><rect x="4.8611%" y="453" width="2.0833%" height="15" fill="rgb(254,191,54)" fg:x="7" fg:w="3"/><text x="5.1111%" y="463.50">`..</text></g><g><title>`0x7FFA23EE4C14 (2 samples, 1.39%)</title><rect x="5.5556%" y="437" width="1.3889%" height="15" fill="rgb(241,83,37)" fg:x="8" fg:w="2"/><text x="5.8056%" y="447.50"></text></g><g><title>`0x7FFA23EE7B29 (2 samples, 1.39%)</title><rect x="5.5556%" y="421" width="1.3889%" height="15" fill="rgb(233,36,39)" fg:x="8" fg:w="2"/><text x="5.8056%" y="431.50"></text></g><g><title>`0x7FFA23EE88A8 (2 samples, 1.39%)</title><rect x="5.5556%" y="405" width="1.3889%" height="15" fill="rgb(226,3,54)" fg:x="8" fg:w="2"/><text x="5.8056%" y="415.50"></text></g><g><title>`0x7FFA23EE4479 (2 samples, 1.39%)</title><rect x="5.5556%" y="389" width="1.3889%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="2"/><text x="5.8056%" y="399.50"></text></g><g><title>`0x7FFA23EE4C14 (1 samples, 0.69%)</title><rect x="6.2500%" y="373" width="0.6944%" height="15" fill="rgb(238,167,29)" fg:x="9" fg:w="1"/><text x="6.5000%" y="383.50"></text></g><g><title>`0x7FFA23EE79D2 (1 samples, 0.69%)</title><rect x="6.2500%" y="357" width="0.6944%" height="15" fill="rgb(232,182,51)" fg:x="9" fg:w="1"/><text x="6.5000%" y="367.50"></text></g><g><title>`0x7FFA23EE5096 (1 samples, 0.69%)</title><rect x="6.2500%" y="341" width="0.6944%" height="15" fill="rgb(231,60,39)" fg:x="9" fg:w="1"/><text x="6.5000%" y="351.50"></text></g><g><title>`0x7FFA23EEFB53 (4 samples, 2.78%)</title><rect x="4.8611%" y="501" width="2.7778%" height="15" fill="rgb(208,69,12)" fg:x="7" fg:w="4"/><text x="5.1111%" y="511.50">`0..</text></g><g><title>`0x7FFA23F3020F (4 samples, 2.78%)</title><rect x="4.8611%" y="485" width="2.7778%" height="15" fill="rgb(235,93,37)" fg:x="7" fg:w="4"/><text x="5.1111%" y="495.50">`0..</text></g><g><title>`0x7FFA23F30F70 (4 samples, 2.78%)</title><rect x="4.8611%" y="469" width="2.7778%" height="15" fill="rgb(213,116,39)" fg:x="7" fg:w="4"/><text x="5.1111%" y="479.50">`0..</text></g><g><title>`0x7FFA23F31261 (1 samples, 0.69%)</title><rect x="6.9444%" y="453" width="0.6944%" height="15" fill="rgb(222,207,29)" fg:x="10" fg:w="1"/><text x="7.1944%" y="463.50"></text></g><g><title>`0x7FFA23F6D6D4 (1 samples, 0.69%)</title><rect x="6.9444%" y="437" width="0.6944%" height="15" fill="rgb(206,96,30)" fg:x="10" fg:w="1"/><text x="7.1944%" y="447.50"></text></g><g><title>`0x7FFA216B045F (6 samples, 4.17%)</title><rect x="4.1667%" y="613" width="4.1667%" height="15" fill="rgb(218,138,4)" fg:x="6" fg:w="6"/><text x="4.4167%" y="623.50">`0x7F..</text></g><g><title>`0x7FFA216B05A2 (6 samples, 4.17%)</title><rect x="4.1667%" y="597" width="4.1667%" height="15" fill="rgb(250,191,14)" fg:x="6" fg:w="6"/><text x="4.4167%" y="607.50">`0x7F..</text></g><g><title>`0x7FFA216B19C7 (6 samples, 4.17%)</title><rect x="4.1667%" y="581" width="4.1667%" height="15" fill="rgb(239,60,40)" fg:x="6" fg:w="6"/><text x="4.4167%" y="591.50">`0x7F..</text></g><g><title>`0x7FFA216AC050 (6 samples, 4.17%)</title><rect x="4.1667%" y="565" width="4.1667%" height="15" fill="rgb(206,27,48)" fg:x="6" fg:w="6"/><text x="4.4167%" y="575.50">`0x7F..</text></g><g><title>`0x7FFA217BDB72 (6 samples, 4.17%)</title><rect x="4.1667%" y="549" width="4.1667%" height="15" fill="rgb(225,35,8)" fg:x="6" fg:w="6"/><text x="4.4167%" y="559.50">`0x7F..</text></g><g><title>`0x7FFA23EE6AF4 (6 samples, 4.17%)</title><rect x="4.1667%" y="533" width="4.1667%" height="15" fill="rgb(250,213,24)" fg:x="6" fg:w="6"/><text x="4.4167%" y="543.50">`0x7F..</text></g><g><title>`0x7FFA23EE73E4 (5 samples, 3.47%)</title><rect x="4.8611%" y="517" width="3.4722%" height="15" fill="rgb(247,123,22)" fg:x="7" fg:w="5"/><text x="5.1111%" y="527.50">`0x..</text></g><g><title>`0x7FFA23EEFBAE (1 samples, 0.69%)</title><rect x="7.6389%" y="501" width="0.6944%" height="15" fill="rgb(231,138,38)" fg:x="11" fg:w="1"/><text x="7.8889%" y="511.50"></text></g><g><title>`0x7FFA23F0D947 (1 samples, 0.69%)</title><rect x="7.6389%" y="485" width="0.6944%" height="15" fill="rgb(231,145,46)" fg:x="11" fg:w="1"/><text x="7.8889%" y="495.50"></text></g><g><title>`0x7FFA23F3D110 (1 samples, 0.69%)</title><rect x="7.6389%" y="469" width="0.6944%" height="15" fill="rgb(251,118,11)" fg:x="11" fg:w="1"/><text x="7.8889%" y="479.50"></text></g><g><title>`0x7FFA23F3D08A (1 samples, 0.69%)</title><rect x="7.6389%" y="453" width="0.6944%" height="15" fill="rgb(217,147,25)" fg:x="11" fg:w="1"/><text x="7.8889%" y="463.50"></text></g><g><title>`0x7FFA23F3D2F7 (1 samples, 0.69%)</title><rect x="7.6389%" y="437" width="0.6944%" height="15" fill="rgb(247,81,37)" fg:x="11" fg:w="1"/><text x="7.8889%" y="447.50"></text></g><g><title>`0x7FFA23EE9A1D (1 samples, 0.69%)</title><rect x="7.6389%" y="421" width="0.6944%" height="15" fill="rgb(209,12,38)" fg:x="11" fg:w="1"/><text x="7.8889%" y="431.50"></text></g><g><title>`0x7FFA21F078F4 (1 samples, 0.69%)</title><rect x="7.6389%" y="405" width="0.6944%" height="15" fill="rgb(227,1,9)" fg:x="11" fg:w="1"/><text x="7.8889%" y="415.50"></text></g><g><title>`0x7FFA21F3C056 (1 samples, 0.69%)</title><rect x="7.6389%" y="389" width="0.6944%" height="15" fill="rgb(248,47,43)" fg:x="11" fg:w="1"/><text x="7.8889%" y="399.50"></text></g><g><title>`0x7FFA23EF47B1 (1 samples, 0.69%)</title><rect x="8.3333%" y="453" width="0.6944%" height="15" fill="rgb(221,10,30)" fg:x="12" fg:w="1"/><text x="8.5833%" y="463.50"></text></g><g><title>`0x7FFA23EF5B74 (1 samples, 0.69%)</title><rect x="8.3333%" y="437" width="0.6944%" height="15" fill="rgb(210,229,1)" fg:x="12" fg:w="1"/><text x="8.5833%" y="447.50"></text></g><g><title>`0x7FFA23EF6F37 (1 samples, 0.69%)</title><rect x="8.3333%" y="421" width="0.6944%" height="15" fill="rgb(222,148,37)" fg:x="12" fg:w="1"/><text x="8.5833%" y="431.50"></text></g><g><title>`0x7FFA23ED9B1A (1 samples, 0.69%)</title><rect x="8.3333%" y="405" width="0.6944%" height="15" fill="rgb(234,67,33)" fg:x="12" fg:w="1"/><text x="8.5833%" y="415.50"></text></g><g><title>`0x7FFA23F6D8B4 (1 samples, 0.69%)</title><rect x="8.3333%" y="389" width="0.6944%" height="15" fill="rgb(247,98,35)" fg:x="12" fg:w="1"/><text x="8.5833%" y="399.50"></text></g><g><title>slabmap.exe`core::ptr::drop_in_place(slabmap::slab::BitmapSlab (1 samples, 0.69%)</title><rect x="9.0278%" y="437" width="0.6944%" height="15" fill="rgb(247,138,52)" fg:x="13" fg:w="1"/><text x="9.2778%" y="447.50"></text></g><g><title>slabmap.exe`std::io::stdio::_print (1 samples, 0.69%)</title><rect x="9.0278%" y="421" width="0.6944%" height="15" fill="rgb(213,79,30)" fg:x="13" fg:w="1"/><text x="9.2778%" y="431.50"></text></g><g><title>slabmap.exe`std::io::stdio::print_to (1 samples, 0.69%)</title><rect x="9.0278%" y="405" width="0.6944%" height="15" fill="rgb(246,177,23)" fg:x="13" fg:w="1"/><text x="9.2778%" y="415.50"></text></g><g><title>slabmap.exe`std::io::stdio::stdout (1 samples, 0.69%)</title><rect x="9.0278%" y="389" width="0.6944%" height="15" fill="rgb(230,62,27)" fg:x="13" fg:w="1"/><text x="9.2778%" y="399.50"></text></g><g><title>slabmap.exe`std::sync::once_lock::OnceLock::get_or_init (1 samples, 0.69%)</title><rect x="9.0278%" y="373" width="0.6944%" height="15" fill="rgb(216,154,8)" fg:x="13" fg:w="1"/><text x="9.2778%" y="383.50"></text></g><g><title>slabmap.exe`std::sync::once_lock::OnceLock::get_or_try_init (1 samples, 0.69%)</title><rect x="9.0278%" y="357" width="0.6944%" height="15" fill="rgb(244,35,45)" fg:x="13" fg:w="1"/><text x="9.2778%" y="367.50"></text></g><g><title>slabmap.exe`std::sync::once_lock::OnceLock::initialize&lt;std::sync::reentrant_lock::ReentrantLock&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt; &gt; &gt;,std::sync::once_lock::impl$0::get_or_init::closure_env$0&lt;std::sync::reentrant_lock::ReentrantLock&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt; &gt; &gt;,std::io::stdio::stdout::closure_env$0&gt;,never$&gt; (1 samples, 0.69%)</title><rect x="9.0278%" y="341" width="0.6944%" height="15" fill="rgb(251,115,12)" fg:x="13" fg:w="1"/><text x="9.2778%" y="351.50"></text></g><g><title>slabmap.exe`std::sync::poison::once::Once::call_once_force (1 samples, 0.69%)</title><rect x="9.0278%" y="325" width="0.6944%" height="15" fill="rgb(240,54,50)" fg:x="13" fg:w="1"/><text x="9.2778%" y="335.50"></text></g><g><title>slabmap.exe`std::sys::sync::once::futex::Once::call (1 samples, 0.69%)</title><rect x="9.0278%" y="309" width="0.6944%" height="15" fill="rgb(233,84,52)" fg:x="13" fg:w="1"/><text x="9.2778%" y="319.50"></text></g><g><title>slabmap.exe`core::cell::Cell::get (1 samples, 0.69%)</title><rect x="9.0278%" y="293" width="0.6944%" height="15" fill="rgb(207,117,47)" fg:x="13" fg:w="1"/><text x="9.2778%" y="303.50"></text></g><g><title>slabmap.exe`core::ops::function::FnOnce::call_once&lt;std::sync::poison::once::impl$2::call_once_force::closure_env$0&lt;std::sync::once_lock::impl$0::initialize::closure_env$0&lt;std::sync::reentrant_lock::ReentrantLock&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt; &gt; &gt;,std::sync::once_lock::impl$0::get_or_init::closure_env$0&lt;std::sync::reentrant_lock::ReentrantLock&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt; &gt; &gt;,std::io::stdio::stdout::closure_env$0&gt;,never$&gt; &gt;,tuple$&lt;ref$&lt;std::sync::poison::once::OnceState&gt; &gt; &gt; (1 samples, 0.69%)</title><rect x="9.0278%" y="277" width="0.6944%" height="15" fill="rgb(249,43,39)" fg:x="13" fg:w="1"/><text x="9.2778%" y="287.50"></text></g><g><title>slabmap.exe`core::ops::function::FnOnce::call_once (1 samples, 0.69%)</title><rect x="9.0278%" y="261" width="0.6944%" height="15" fill="rgb(209,38,44)" fg:x="13" fg:w="1"/><text x="9.2778%" y="271.50"></text></g><g><title>slabmap.exe`std::sync::poison::once::impl$2::call_once_force::closure$0 (1 samples, 0.69%)</title><rect x="9.0278%" y="245" width="0.6944%" height="15" fill="rgb(236,212,23)" fg:x="13" fg:w="1"/><text x="9.2778%" y="255.50"></text></g><g><title>slabmap.exe`std::sync::once_lock::impl$0::initialize::closure$0 (1 samples, 0.69%)</title><rect x="9.0278%" y="229" width="0.6944%" height="15" fill="rgb(242,79,21)" fg:x="13" fg:w="1"/><text x="9.2778%" y="239.50"></text></g><g><title>slabmap.exe`std::sync::once_lock::impl$0::get_or_init::closure$0 (1 samples, 0.69%)</title><rect x="9.0278%" y="213" width="0.6944%" height="15" fill="rgb(211,96,35)" fg:x="13" fg:w="1"/><text x="9.2778%" y="223.50"></text></g><g><title>slabmap.exe`std::io::stdio::stdout::closure$0 (1 samples, 0.69%)</title><rect x="9.0278%" y="197" width="0.6944%" height="15" fill="rgb(253,215,40)" fg:x="13" fg:w="1"/><text x="9.2778%" y="207.50"></text></g><g><title>slabmap.exe`std::io::buffered::linewriter::LineWriter::new (1 samples, 0.69%)</title><rect x="9.0278%" y="181" width="0.6944%" height="15" fill="rgb(211,81,21)" fg:x="13" fg:w="1"/><text x="9.2778%" y="191.50"></text></g><g><title>slabmap.exe`std::io::buffered::linewriter::LineWriter::with_capacity (1 samples, 0.69%)</title><rect x="9.0278%" y="165" width="0.6944%" height="15" fill="rgb(208,190,38)" fg:x="13" fg:w="1"/><text x="9.2778%" y="175.50"></text></g><g><title>slabmap.exe`std::io::buffered::bufwriter::BufWriter::with_capacity (1 samples, 0.69%)</title><rect x="9.0278%" y="149" width="0.6944%" height="15" fill="rgb(235,213,38)" fg:x="13" fg:w="1"/><text x="9.2778%" y="159.50"></text></g><g><title>slabmap.exe`alloc::vec::Vec::with_capacity (1 samples, 0.69%)</title><rect x="9.0278%" y="133" width="0.6944%" height="15" fill="rgb(237,122,38)" fg:x="13" fg:w="1"/><text x="9.2778%" y="143.50"></text></g><g><title>slabmap.exe`alloc::vec::Vec::with_capacity_in (1 samples, 0.69%)</title><rect x="9.0278%" y="117" width="0.6944%" height="15" fill="rgb(244,218,35)" fg:x="13" fg:w="1"/><text x="9.2778%" y="127.50"></text></g><g><title>slabmap.exe`alloc::raw_vec::RawVec::with_capacity_in (1 samples, 0.69%)</title><rect x="9.0278%" y="101" width="0.6944%" height="15" fill="rgb(240,68,47)" fg:x="13" fg:w="1"/><text x="9.2778%" y="111.50"></text></g><g><title>slabmap.exe`alloc::raw_vec::RawVecInner::with_capacity_in (1 samples, 0.69%)</title><rect x="9.0278%" y="85" width="0.6944%" height="15" fill="rgb(210,16,53)" fg:x="13" fg:w="1"/><text x="9.2778%" y="95.50"></text></g><g><title>slabmap.exe`alloc::raw_vec::RawVecInner::try_allocate_in (1 samples, 0.69%)</title><rect x="9.0278%" y="69" width="0.6944%" height="15" fill="rgb(235,124,12)" fg:x="13" fg:w="1"/><text x="9.2778%" y="79.50"></text></g><g><title>`0x7FFA23EFB44D (1 samples, 0.69%)</title><rect x="9.0278%" y="53" width="0.6944%" height="15" fill="rgb(224,169,11)" fg:x="13" fg:w="1"/><text x="9.2778%" y="63.50"></text></g><g><title>`0x7FFA23EFF1BE (1 samples, 0.69%)</title><rect x="9.0278%" y="37" width="0.6944%" height="15" fill="rgb(250,166,2)" fg:x="13" fg:w="1"/><text x="9.2778%" y="47.50"></text></g><g><title>slabmap.exe`core::ptr::drop_in_place(slabmap::SlabMap (2 samples, 1.39%)</title><rect x="9.0278%" y="453" width="1.3889%" height="15" fill="rgb(242,216,29)" fg:x="13" fg:w="2"/><text x="9.2778%" y="463.50"></text></g><g><title>slabmap.exe`core::ptr::drop_in_place(std::collections::hash::map::HashMap (1 samples, 0.69%)</title><rect x="9.7222%" y="437" width="0.6944%" height="15" fill="rgb(230,116,27)" fg:x="14" fg:w="1"/><text x="9.9722%" y="447.50"></text></g><g><title>slabmap.exe`core::ptr::drop_in_place(hashbrown::map::HashMap (1 samples, 0.69%)</title><rect x="9.7222%" y="421" width="0.6944%" height="15" fill="rgb(228,99,48)" fg:x="14" fg:w="1"/><text x="9.9722%" y="431.50"></text></g><g><title>slabmap.exe`core::ptr::drop_in_place(hashbrown::raw::RawTable&lt;tuple$ (1 samples, 0.69%)</title><rect x="9.7222%" y="405" width="0.6944%" height="15" fill="rgb(253,11,6)" fg:x="14" fg:w="1"/><text x="9.9722%" y="415.50"></text></g><g><title>slabmap.exe`hashbrown::raw::impl$18::drop(hashbrown::raw::RawTable&lt;tuple$ (1 samples, 0.69%)</title><rect x="9.7222%" y="389" width="0.6944%" height="15" fill="rgb(247,143,39)" fg:x="14" fg:w="1"/><text x="9.9722%" y="399.50"></text></g><g><title>`0x7FFA23EF47B1 (1 samples, 0.69%)</title><rect x="9.7222%" y="373" width="0.6944%" height="15" fill="rgb(236,97,10)" fg:x="14" fg:w="1"/><text x="9.9722%" y="383.50"></text></g><g><title>`0x7FFA23EF5B74 (1 samples, 0.69%)</title><rect x="9.7222%" y="357" width="0.6944%" height="15" fill="rgb(233,208,19)" fg:x="14" fg:w="1"/><text x="9.9722%" y="367.50"></text></g><g><title>`0x7FFA23EF6F37 (1 samples, 0.69%)</title><rect x="9.7222%" y="341" width="0.6944%" height="15" fill="rgb(216,164,2)" fg:x="14" fg:w="1"/><text x="9.9722%" y="351.50"></text></g><g><title>`0x7FFA23ED9B1A (1 samples, 0.69%)</title><rect x="9.7222%" y="325" width="0.6944%" height="15" fill="rgb(220,129,5)" fg:x="14" fg:w="1"/><text x="9.9722%" y="335.50"></text></g><g><title>`0x7FFA23F6D8B4 (1 samples, 0.69%)</title><rect x="9.7222%" y="309" width="0.6944%" height="15" fill="rgb(242,17,10)" fg:x="14" fg:w="1"/><text x="9.9722%" y="319.50"></text></g><g><title>slabmap.exe`slabmap::slab::FreeSlot::has_next (1 samples, 0.69%)</title><rect x="11.8056%" y="405" width="0.6944%" height="15" fill="rgb(242,107,0)" fg:x="17" fg:w="1"/><text x="12.0556%" y="415.50"></text></g><g><title>slabmap.exe`slabmap::slab::BitmapSlab&lt;usize&gt;::insert (4 samples, 2.78%)</title><rect x="10.4167%" y="437" width="2.7778%" height="15" fill="rgb(251,28,31)" fg:x="15" fg:w="4"/><text x="10.6667%" y="447.50">sl..</text></g><g><title>slabmap.exe`slabmap::slab::BitmapSlab&lt;usize&gt;::claim_available_slot (4 samples, 2.78%)</title><rect x="10.4167%" y="421" width="2.7778%" height="15" fill="rgb(233,223,10)" fg:x="15" fg:w="4"/><text x="10.6667%" y="431.50">sl..</text></g><g><title>slabmap.exe`word_bitmap::BitMap&lt;u64&gt;::first_zero_lsb (1 samples, 0.69%)</title><rect x="12.5000%" y="405" width="0.6944%" height="15" fill="rgb(215,21,27)" fg:x="18" fg:w="1"/><text x="12.7500%" y="415.50"></text></g><g><title>slabmap.exe`word_bitmap::word::impl$4::trailing_ones (1 samples, 0.69%)</title><rect x="12.5000%" y="389" width="0.6944%" height="15" fill="rgb(232,23,21)" fg:x="18" fg:w="1"/><text x="12.7500%" y="399.50"></text></g><g><title>slabmap.exe`core::num::impl$9::trailing_ones (1 samples, 0.69%)</title><rect x="12.5000%" y="373" width="0.6944%" height="15" fill="rgb(244,5,23)" fg:x="18" fg:w="1"/><text x="12.7500%" y="383.50"></text></g><g><title>slabmap.exe`hashbrown::control::bitmask::impl$2::next (1 samples, 0.69%)</title><rect x="14.5833%" y="341" width="0.6944%" height="15" fill="rgb(226,81,46)" fg:x="21" fg:w="1"/><text x="14.8333%" y="351.50"></text></g><g><title>slabmap.exe`hashbrown::control::bitmask::BitMask::lowest_set_bit (1 samples, 0.69%)</title><rect x="14.5833%" y="325" width="0.6944%" height="15" fill="rgb(247,70,30)" fg:x="21" fg:w="1"/><text x="14.8333%" y="335.50"></text></g><g><title>slabmap.exe`std::collections::hash::map::HashMap&lt;usize,usize,rustc_hash::FxBuildHasher&gt;::get (18 samples, 12.50%)</title><rect x="13.1944%" y="437" width="12.5000%" height="15" fill="rgb(212,68,19)" fg:x="19" fg:w="18"/><text x="13.4444%" y="447.50">slabmap.exe`std::co..</text></g><g><title>slabmap.exe`hashbrown::map::HashMap&lt;usize,usize,rustc_hash::FxBuildHasher,alloc::alloc::Global&gt;::get (18 samples, 12.50%)</title><rect x="13.1944%" y="421" width="12.5000%" height="15" fill="rgb(240,187,13)" fg:x="19" fg:w="18"/><text x="13.4444%" y="431.50">slabmap.exe`hashbro..</text></g><g><title>slabmap.exe`hashbrown::map::HashMap&lt;usize,usize,rustc_hash::FxBuildHasher,alloc::alloc::Global&gt;::get_inner (18 samples, 12.50%)</title><rect x="13.1944%" y="405" width="12.5000%" height="15" fill="rgb(223,113,26)" fg:x="19" fg:w="18"/><text x="13.4444%" y="415.50">slabmap.exe`hashbro..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTable&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::get(unsigned long long, hashbrown::map::equivalent_key::closure_env$0 (16 samples, 11.11%)</title><rect x="14.5833%" y="389" width="11.1111%" height="15" fill="rgb(206,192,2)" fg:x="21" fg:w="16"/><text x="14.8333%" y="399.50">slabmap.exe`hash..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTable&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0 (16 samples, 11.11%)</title><rect x="14.5833%" y="373" width="11.1111%" height="15" fill="rgb(241,108,4)" fg:x="21" fg:w="16"/><text x="14.8333%" y="383.50">slabmap.exe`hash..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (16 samples, 11.11%)</title><rect x="14.5833%" y="357" width="11.1111%" height="15" fill="rgb(247,173,49)" fg:x="21" fg:w="16"/><text x="14.8333%" y="367.50">slabmap.exe`hash..</text></g><g><title>slabmap.exe`hashbrown::control::group::sse2::Group::match_tag (15 samples, 10.42%)</title><rect x="15.2778%" y="341" width="10.4167%" height="15" fill="rgb(224,114,35)" fg:x="22" fg:w="15"/><text x="15.5278%" y="351.50">slabmap.exe`has..</text></g><g><title>slabmap.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (15 samples, 10.42%)</title><rect x="15.2778%" y="325" width="10.4167%" height="15" fill="rgb(245,159,27)" fg:x="22" fg:w="15"/><text x="15.5278%" y="335.50">slabmap.exe`cor..</text></g><g><title>slabmap.exe`hashbrown::control::group::sse2::Group::match_empty (15 samples, 10.42%)</title><rect x="26.3889%" y="357" width="10.4167%" height="15" fill="rgb(245,172,44)" fg:x="38" fg:w="15"/><text x="26.6389%" y="367.50">slabmap.exe`has..</text></g><g><title>slabmap.exe`hashbrown::control::group::sse2::Group::match_tag (15 samples, 10.42%)</title><rect x="26.3889%" y="341" width="10.4167%" height="15" fill="rgb(236,23,11)" fg:x="38" fg:w="15"/><text x="26.6389%" y="351.50">slabmap.exe`has..</text></g><g><title>slabmap.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (15 samples, 10.42%)</title><rect x="26.3889%" y="325" width="10.4167%" height="15" fill="rgb(205,117,38)" fg:x="38" fg:w="15"/><text x="26.6389%" y="335.50">slabmap.exe`cor..</text></g><g><title>slabmap.exe`hashbrown::control::group::sse2::Group::match_tag (3 samples, 2.08%)</title><rect x="36.8056%" y="357" width="2.0833%" height="15" fill="rgb(237,72,25)" fg:x="53" fg:w="3"/><text x="37.0556%" y="367.50">s..</text></g><g><title>slabmap.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 2.08%)</title><rect x="36.8056%" y="341" width="2.0833%" height="15" fill="rgb(244,70,9)" fg:x="53" fg:w="3"/><text x="37.0556%" y="351.50">s..</text></g><g><title>slabmap.exe`hashbrown::map::HashMap&lt;usize,usize,rustc_hash::FxBuildHasher,alloc::alloc::Global&gt;::find_or_find_insert_slot (20 samples, 13.89%)</title><rect x="25.6944%" y="405" width="13.8889%" height="15" fill="rgb(217,125,39)" fg:x="37" fg:w="20"/><text x="25.9444%" y="415.50">slabmap.exe`hashbrown..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTable&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::find_or_find_insert_slot(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;usize,usize,usize&gt;, hashbrown::map::make_hasher::closure_env$0 (20 samples, 13.89%)</title><rect x="25.6944%" y="389" width="13.8889%" height="15" fill="rgb(235,36,10)" fg:x="37" fg:w="20"/><text x="25.9444%" y="399.50">slabmap.exe`hashbrown..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (20 samples, 13.89%)</title><rect x="25.6944%" y="373" width="13.8889%" height="15" fill="rgb(251,123,47)" fg:x="37" fg:w="20"/><text x="25.9444%" y="383.50">slabmap.exe`hashbrown..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.69%)</title><rect x="38.8889%" y="357" width="0.6944%" height="15" fill="rgb(221,13,13)" fg:x="56" fg:w="1"/><text x="39.1389%" y="367.50"></text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.69%)</title><rect x="38.8889%" y="341" width="0.6944%" height="15" fill="rgb(238,131,9)" fg:x="56" fg:w="1"/><text x="39.1389%" y="351.50"></text></g><g><title>slabmap.exe`hashbrown::map::make_hash (1 samples, 0.69%)</title><rect x="39.5833%" y="405" width="0.6944%" height="15" fill="rgb(211,50,8)" fg:x="57" fg:w="1"/><text x="39.8333%" y="415.50"></text></g><g><title>slabmap.exe`core::hash::BuildHasher::hash_one (1 samples, 0.69%)</title><rect x="39.5833%" y="389" width="0.6944%" height="15" fill="rgb(245,182,24)" fg:x="57" fg:w="1"/><text x="39.8333%" y="399.50"></text></g><g><title>slabmap.exe`core::hash::impls::impl$5::hash (1 samples, 0.69%)</title><rect x="39.5833%" y="373" width="0.6944%" height="15" fill="rgb(242,14,37)" fg:x="57" fg:w="1"/><text x="39.8333%" y="383.50"></text></g><g><title>slabmap.exe`core::hash::impls::impl$13::hash (1 samples, 0.69%)</title><rect x="39.5833%" y="357" width="0.6944%" height="15" fill="rgb(246,228,12)" fg:x="57" fg:w="1"/><text x="39.8333%" y="367.50"></text></g><g><title>slabmap.exe`rustc_hash::impl$3::write_usize (1 samples, 0.69%)</title><rect x="39.5833%" y="341" width="0.6944%" height="15" fill="rgb(213,55,15)" fg:x="57" fg:w="1"/><text x="39.8333%" y="351.50"></text></g><g><title>slabmap.exe`rustc_hash::FxHasher::add_to_hash (1 samples, 0.69%)</title><rect x="39.5833%" y="325" width="0.6944%" height="15" fill="rgb(209,9,3)" fg:x="57" fg:w="1"/><text x="39.8333%" y="335.50"></text></g><g><title>slabmap.exe`core::num::impl$11::wrapping_mul (1 samples, 0.69%)</title><rect x="39.5833%" y="309" width="0.6944%" height="15" fill="rgb(230,59,30)" fg:x="57" fg:w="1"/><text x="39.8333%" y="319.50"></text></g><g><title>slabmap.exe`hashbrown::raw::Bucket&lt;tuple$&lt;usize,usize&gt; &gt;::write(tuple$ (49 samples, 34.03%)</title><rect x="40.2778%" y="389" width="34.0278%" height="15" fill="rgb(209,121,21)" fg:x="58" fg:w="49"/><text x="40.5278%" y="399.50">slabmap.exe`hashbrown::raw::Bucket&lt;tuple$&lt;usize,usize&gt; ..</text></g><g><title>slabmap.exe`hashbrown::raw::Bucket&lt;tuple$&lt;usize,usize&gt; &gt;::as_ptr (49 samples, 34.03%)</title><rect x="40.2778%" y="373" width="34.0278%" height="15" fill="rgb(220,109,13)" fg:x="58" fg:w="49"/><text x="40.5278%" y="383.50">slabmap.exe`hashbrown::raw::Bucket&lt;tuple$&lt;usize,usize&gt; ..</text></g><g><title>slabmap.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (49 samples, 34.03%)</title><rect x="40.2778%" y="357" width="34.0278%" height="15" fill="rgb(232,18,1)" fg:x="58" fg:w="49"/><text x="40.5278%" y="367.50">slabmap.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tupl..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTable&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::bucket (2 samples, 1.39%)</title><rect x="74.3056%" y="389" width="1.3889%" height="15" fill="rgb(215,41,42)" fg:x="107" fg:w="2"/><text x="74.5556%" y="399.50"></text></g><g><title>slabmap.exe`hashbrown::raw::Bucket&lt;tuple$&lt;usize,usize&gt; &gt;::from_base_index(core::ptr::non_null::NonNull&lt;tuple$ (2 samples, 1.39%)</title><rect x="74.3056%" y="373" width="1.3889%" height="15" fill="rgb(224,123,36)" fg:x="107" fg:w="2"/><text x="74.5556%" y="383.50"></text></g><g><title>slabmap.exe`core::ptr::mut_ptr::impl$0::sub(tuple$ (2 samples, 1.39%)</title><rect x="74.3056%" y="357" width="1.3889%" height="15" fill="rgb(240,125,3)" fg:x="107" fg:w="2"/><text x="74.5556%" y="367.50"></text></g><g><title>slabmap.exe`hashbrown::control::tag::Tag::special_is_empty (1 samples, 0.69%)</title><rect x="76.3889%" y="373" width="0.6944%" height="15" fill="rgb(205,98,50)" fg:x="110" fg:w="1"/><text x="76.6389%" y="383.50"></text></g><g><title>slabmap.exe`slabmap::SlabMap&lt;usize,usize&gt;::insert (107 samples, 74.31%)</title><rect x="10.4167%" y="453" width="74.3056%" height="15" fill="rgb(205,185,37)" fg:x="15" fg:w="107"/><text x="10.6667%" y="463.50">slabmap.exe`slabmap::SlabMap&lt;usize,usize&gt;::insert</text></g><g><title>slabmap.exe`std::collections::hash::map::HashMap&lt;usize,usize,rustc_hash::FxBuildHasher&gt;::insert (85 samples, 59.03%)</title><rect x="25.6944%" y="437" width="59.0278%" height="15" fill="rgb(238,207,15)" fg:x="37" fg:w="85"/><text x="25.9444%" y="447.50">slabmap.exe`std::collections::hash::map::HashMap&lt;usize,usize,rustc_hash::FxBuildHasher&gt;::insert</text></g><g><title>slabmap.exe`hashbrown::map::HashMap&lt;usize,usize,rustc_hash::FxBuildHasher,alloc::alloc::Global&gt;::insert (85 samples, 59.03%)</title><rect x="25.6944%" y="421" width="59.0278%" height="15" fill="rgb(213,199,42)" fg:x="37" fg:w="85"/><text x="25.9444%" y="431.50">slabmap.exe`hashbrown::map::HashMap&lt;usize,usize,rustc_hash::FxBuildHasher,alloc::alloc::Global&gt;::i..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTable&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::insert_in_slot(unsigned long long, hashbrown::raw::InsertSlot, tuple$ (64 samples, 44.44%)</title><rect x="40.2778%" y="405" width="44.4444%" height="15" fill="rgb(235,201,11)" fg:x="58" fg:w="64"/><text x="40.5278%" y="415.50">slabmap.exe`hashbrown::raw::RawTable&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Gl..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::record_item_insert_at (13 samples, 9.03%)</title><rect x="75.6944%" y="389" width="9.0278%" height="15" fill="rgb(207,46,11)" fg:x="109" fg:w="13"/><text x="75.9444%" y="399.50">slabmap.exe`h..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::set_ctrl_hash (11 samples, 7.64%)</title><rect x="77.0833%" y="373" width="7.6389%" height="15" fill="rgb(241,35,35)" fg:x="111" fg:w="11"/><text x="77.3333%" y="383.50">slabmap.ex..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::set_ctrl (11 samples, 7.64%)</title><rect x="77.0833%" y="357" width="7.6389%" height="15" fill="rgb(243,32,47)" fg:x="111" fg:w="11"/><text x="77.3333%" y="367.50">slabmap.ex..</text></g><g><title>slabmap.exe`core::num::impl$11::wrapping_sub (11 samples, 7.64%)</title><rect x="77.0833%" y="341" width="7.6389%" height="15" fill="rgb(247,202,23)" fg:x="111" fg:w="11"/><text x="77.3333%" y="351.50">slabmap.ex..</text></g><g><title>slabmap.exe`hashbrown::raw::RawTable&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;usize,usize,rustc_hash::FxBuildHasher&gt; &gt;(unsigned long long, hashbrown::map::make_hasher::closure_env$0 (1 samples, 0.69%)</title><rect x="84.7222%" y="437" width="0.6944%" height="15" fill="rgb(219,102,11)" fg:x="122" fg:w="1"/><text x="84.9722%" y="447.50"></text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::reserve_rehash_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$&lt;Output,u64&gt; &gt; &gt; &gt;, hashbrown::raw::Fallibility, hashbrown::raw::TableLayout, enum2$&lt;core::option::Option&lt;void (*)(ptr_mut$ (1 samples, 0.69%)</title><rect x="84.7222%" y="421" width="0.6944%" height="15" fill="rgb(243,110,44)" fg:x="122" fg:w="1"/><text x="84.9722%" y="431.50"></text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::resize_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$ (1 samples, 0.69%)</title><rect x="84.7222%" y="405" width="0.6944%" height="15" fill="rgb(222,74,54)" fg:x="122" fg:w="1"/><text x="84.9722%" y="415.50"></text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::prepare_resize (1 samples, 0.69%)</title><rect x="84.7222%" y="389" width="0.6944%" height="15" fill="rgb(216,99,12)" fg:x="122" fg:w="1"/><text x="84.9722%" y="399.50"></text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 0.69%)</title><rect x="84.7222%" y="373" width="0.6944%" height="15" fill="rgb(226,22,26)" fg:x="122" fg:w="1"/><text x="84.9722%" y="383.50"></text></g><g><title>slabmap.exe`hashbrown::raw::RawTableInner::new_uninitialized (1 samples, 0.69%)</title><rect x="84.7222%" y="357" width="0.6944%" height="15" fill="rgb(217,163,10)" fg:x="122" fg:w="1"/><text x="84.9722%" y="367.50"></text></g><g><title>`0x7FFA0A2F1A89 (1 samples, 0.69%)</title><rect x="84.7222%" y="341" width="0.6944%" height="15" fill="rgb(213,25,53)" fg:x="122" fg:w="1"/><text x="84.9722%" y="351.50"></text></g><g><title>`0x7FFA23F1CC91 (126 samples, 87.50%)</title><rect x="0.6944%" y="661" width="87.5000%" height="15" fill="rgb(252,105,26)" fg:x="1" fg:w="126"/><text x="0.9444%" y="671.50">`0x7FFA23F1CC91</text></g><g><title>`0x7FFA220A7374 (126 samples, 87.50%)</title><rect x="0.6944%" y="645" width="87.5000%" height="15" fill="rgb(220,39,43)" fg:x="1" fg:w="126"/><text x="0.9444%" y="655.50">`0x7FFA220A7374</text></g><g><title>slabmap.exe`__scrt_common_main_seh() (122 samples, 84.72%)</title><rect x="3.4722%" y="629" width="84.7222%" height="15" fill="rgb(229,68,48)" fg:x="5" fg:w="122"/><text x="3.7222%" y="639.50">slabmap.exe`__scrt_common_main_seh()</text></g><g><title>slabmap.exe`invoke_main() (115 samples, 79.86%)</title><rect x="8.3333%" y="613" width="79.8611%" height="15" fill="rgb(252,8,32)" fg:x="12" fg:w="115"/><text x="8.5833%" y="623.50">slabmap.exe`invoke_main()</text></g><g><title>slabmap.exe`main (115 samples, 79.86%)</title><rect x="8.3333%" y="597" width="79.8611%" height="15" fill="rgb(223,20,43)" fg:x="12" fg:w="115"/><text x="8.5833%" y="607.50">slabmap.exe`main</text></g><g><title>slabmap.exe`std::rt::lang_start_internal (115 samples, 79.86%)</title><rect x="8.3333%" y="581" width="79.8611%" height="15" fill="rgb(229,81,49)" fg:x="12" fg:w="115"/><text x="8.5833%" y="591.50">slabmap.exe`std::rt::lang_start_internal</text></g><g><title>slabmap.exe`std::panic::catch_unwind (115 samples, 79.86%)</title><rect x="8.3333%" y="565" width="79.8611%" height="15" fill="rgb(236,28,36)" fg:x="12" fg:w="115"/><text x="8.5833%" y="575.50">slabmap.exe`std::panic::catch_unwind</text></g><g><title>slabmap.exe`std::panicking::catch_unwind (115 samples, 79.86%)</title><rect x="8.3333%" y="549" width="79.8611%" height="15" fill="rgb(249,185,26)" fg:x="12" fg:w="115"/><text x="8.5833%" y="559.50">slabmap.exe`std::panicking::catch_unwind</text></g><g><title>slabmap.exe`std::panicking::catch_unwind::do_call (115 samples, 79.86%)</title><rect x="8.3333%" y="533" width="79.8611%" height="15" fill="rgb(249,174,33)" fg:x="12" fg:w="115"/><text x="8.5833%" y="543.50">slabmap.exe`std::panicking::catch_unwind::do_call</text></g><g><title>slabmap.exe`std::rt::lang_start_internal::closure$0 (115 samples, 79.86%)</title><rect x="8.3333%" y="517" width="79.8611%" height="15" fill="rgb(233,201,37)" fg:x="12" fg:w="115"/><text x="8.5833%" y="527.50">slabmap.exe`std::rt::lang_start_internal::closure$0</text></g><g><title>slabmap.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (115 samples, 79.86%)</title><rect x="8.3333%" y="501" width="79.8611%" height="15" fill="rgb(221,78,26)" fg:x="12" fg:w="115"/><text x="8.5833%" y="511.50">slabmap.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>slabmap.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (115 samples, 79.86%)</title><rect x="8.3333%" y="485" width="79.8611%" height="15" fill="rgb(250,127,30)" fg:x="12" fg:w="115"/><text x="8.5833%" y="495.50">slabmap.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>slabmap.exe`slabmap::main (115 samples, 79.86%)</title><rect x="8.3333%" y="469" width="79.8611%" height="15" fill="rgb(230,49,44)" fg:x="12" fg:w="115"/><text x="8.5833%" y="479.50">slabmap.exe`slabmap::main</text></g><g><title>slabmap.exe`slabmap::SlabMap&lt;usize,usize&gt;::with_capacity (5 samples, 3.47%)</title><rect x="84.7222%" y="453" width="3.4722%" height="15" fill="rgb(229,67,23)" fg:x="122" fg:w="5"/><text x="84.9722%" y="463.50">sla..</text></g><g><title>slabmap.exe`slabmap::slab::BitmapSlab&lt;usize&gt;::with_capacity (4 samples, 2.78%)</title><rect x="85.4167%" y="437" width="2.7778%" height="15" fill="rgb(249,83,47)" fg:x="123" fg:w="4"/><text x="85.6667%" y="447.50">sl..</text></g><g><title>slabmap.exe`slabmap::slab::BitmapSlab&lt;usize&gt;::initialize_mem (4 samples, 2.78%)</title><rect x="85.4167%" y="421" width="2.7778%" height="15" fill="rgb(215,43,3)" fg:x="123" fg:w="4"/><text x="85.6667%" y="431.50">sl..</text></g><g><title>slabmap.exe`slabmap::slab::BitmapSlab&lt;usize&gt;::initialize_mem_sl(unsigned char**, alloc::vec::Vec (4 samples, 2.78%)</title><rect x="85.4167%" y="405" width="2.7778%" height="15" fill="rgb(238,154,13)" fg:x="123" fg:w="4"/><text x="85.6667%" y="415.50">sl..</text></g><g><title>`0x7FFA23F45C42 (1 samples, 0.69%)</title><rect x="88.1944%" y="645" width="0.6944%" height="15" fill="rgb(219,56,2)" fg:x="127" fg:w="1"/><text x="88.4444%" y="655.50"></text></g><g><title>`0x7FFA23FA26BC (1 samples, 0.69%)</title><rect x="88.8889%" y="613" width="0.6944%" height="15" fill="rgb(233,0,4)" fg:x="128" fg:w="1"/><text x="89.1389%" y="623.50"></text></g><g><title>`0x7FFA23FDB343 (1 samples, 0.69%)</title><rect x="88.8889%" y="597" width="0.6944%" height="15" fill="rgb(235,30,7)" fg:x="128" fg:w="1"/><text x="89.1389%" y="607.50"></text></g><g><title>`0x7FFA23FDDE11 (1 samples, 0.69%)</title><rect x="88.8889%" y="581" width="0.6944%" height="15" fill="rgb(250,79,13)" fg:x="128" fg:w="1"/><text x="89.1389%" y="591.50"></text></g><g><title>`0x7FFA23F746AB (1 samples, 0.69%)</title><rect x="88.8889%" y="565" width="0.6944%" height="15" fill="rgb(211,146,34)" fg:x="128" fg:w="1"/><text x="89.1389%" y="575.50"></text></g><g><title>`0x7FFA23FA2A71 (1 samples, 0.69%)</title><rect x="89.5833%" y="613" width="0.6944%" height="15" fill="rgb(228,22,38)" fg:x="129" fg:w="1"/><text x="89.8333%" y="623.50"></text></g><g><title>`0x7FFA23F6DFF4 (1 samples, 0.69%)</title><rect x="89.5833%" y="597" width="0.6944%" height="15" fill="rgb(235,168,5)" fg:x="129" fg:w="1"/><text x="89.8333%" y="607.50"></text></g><g><title>`0x7FFA23EE4AAA (1 samples, 0.69%)</title><rect x="90.2778%" y="517" width="0.6944%" height="15" fill="rgb(221,155,16)" fg:x="130" fg:w="1"/><text x="90.5278%" y="527.50"></text></g><g><title>`0x7FFA23EE4D42 (1 samples, 0.69%)</title><rect x="90.2778%" y="501" width="0.6944%" height="15" fill="rgb(215,215,53)" fg:x="130" fg:w="1"/><text x="90.5278%" y="511.50"></text></g><g><title>`0x7FFA23F6D9F4 (1 samples, 0.69%)</title><rect x="90.2778%" y="485" width="0.6944%" height="15" fill="rgb(223,4,10)" fg:x="130" fg:w="1"/><text x="90.5278%" y="495.50"></text></g><g><title>`0x7FFA23EE7B29 (1 samples, 0.69%)</title><rect x="90.9722%" y="501" width="0.6944%" height="15" fill="rgb(234,103,6)" fg:x="131" fg:w="1"/><text x="91.2222%" y="511.50"></text></g><g><title>`0x7FFA23EE88A8 (1 samples, 0.69%)</title><rect x="90.9722%" y="485" width="0.6944%" height="15" fill="rgb(227,97,0)" fg:x="131" fg:w="1"/><text x="91.2222%" y="495.50"></text></g><g><title>`0x7FFA23EE4479 (1 samples, 0.69%)</title><rect x="90.9722%" y="469" width="0.6944%" height="15" fill="rgb(234,150,53)" fg:x="131" fg:w="1"/><text x="91.2222%" y="479.50"></text></g><g><title>`0x7FFA23EE4C14 (1 samples, 0.69%)</title><rect x="90.9722%" y="453" width="0.6944%" height="15" fill="rgb(228,201,54)" fg:x="131" fg:w="1"/><text x="91.2222%" y="463.50"></text></g><g><title>`0x7FFA23EE79D2 (1 samples, 0.69%)</title><rect x="90.9722%" y="437" width="0.6944%" height="15" fill="rgb(222,22,37)" fg:x="131" fg:w="1"/><text x="91.2222%" y="447.50"></text></g><g><title>`0x7FFA23EE5030 (1 samples, 0.69%)</title><rect x="90.9722%" y="421" width="0.6944%" height="15" fill="rgb(237,53,32)" fg:x="131" fg:w="1"/><text x="91.2222%" y="431.50"></text></g><g><title>`0x7FFA23F02513 (1 samples, 0.69%)</title><rect x="91.6667%" y="485" width="0.6944%" height="15" fill="rgb(233,25,53)" fg:x="132" fg:w="1"/><text x="91.9167%" y="495.50"></text></g><g><title>`0x7FFA23F02AFA (1 samples, 0.69%)</title><rect x="91.6667%" y="469" width="0.6944%" height="15" fill="rgb(210,40,34)" fg:x="132" fg:w="1"/><text x="91.9167%" y="479.50"></text></g><g><title>`0x7FFA23EEFB31 (4 samples, 2.78%)</title><rect x="90.2778%" y="565" width="2.7778%" height="15" fill="rgb(241,220,44)" fg:x="130" fg:w="4"/><text x="90.5278%" y="575.50">`0..</text></g><g><title>`0x7FFA23F3C2ED (4 samples, 2.78%)</title><rect x="90.2778%" y="549" width="2.7778%" height="15" fill="rgb(235,28,35)" fg:x="130" fg:w="4"/><text x="90.5278%" y="559.50">`0..</text></g><g><title>`0x7FFA23EE4479 (4 samples, 2.78%)</title><rect x="90.2778%" y="533" width="2.7778%" height="15" fill="rgb(210,56,17)" fg:x="130" fg:w="4"/><text x="90.5278%" y="543.50">`0..</text></g><g><title>`0x7FFA23EE4C14 (3 samples, 2.08%)</title><rect x="90.9722%" y="517" width="2.0833%" height="15" fill="rgb(224,130,29)" fg:x="131" fg:w="3"/><text x="91.2222%" y="527.50">`..</text></g><g><title>`0x7FFA23EE7BC4 (2 samples, 1.39%)</title><rect x="91.6667%" y="501" width="1.3889%" height="15" fill="rgb(235,212,8)" fg:x="132" fg:w="2"/><text x="91.9167%" y="511.50"></text></g><g><title>`0x7FFA23F026B7 (1 samples, 0.69%)</title><rect x="92.3611%" y="485" width="0.6944%" height="15" fill="rgb(223,33,50)" fg:x="133" fg:w="1"/><text x="92.6111%" y="495.50"></text></g><g><title>`0x7FFA23F3D08A (1 samples, 0.69%)</title><rect x="93.0556%" y="533" width="0.6944%" height="15" fill="rgb(219,149,13)" fg:x="134" fg:w="1"/><text x="93.3056%" y="543.50"></text></g><g><title>`0x7FFA23F3D2F7 (1 samples, 0.69%)</title><rect x="93.0556%" y="517" width="0.6944%" height="15" fill="rgb(250,156,29)" fg:x="134" fg:w="1"/><text x="93.3056%" y="527.50"></text></g><g><title>`0x7FFA23EE9A1D (1 samples, 0.69%)</title><rect x="93.0556%" y="501" width="0.6944%" height="15" fill="rgb(216,193,19)" fg:x="134" fg:w="1"/><text x="93.3056%" y="511.50"></text></g><g><title>`0x7FFA220A7668 (1 samples, 0.69%)</title><rect x="93.0556%" y="485" width="0.6944%" height="15" fill="rgb(216,135,14)" fg:x="134" fg:w="1"/><text x="93.3056%" y="495.50"></text></g><g><title>`0x7FFA220ABB37 (1 samples, 0.69%)</title><rect x="93.0556%" y="469" width="0.6944%" height="15" fill="rgb(241,47,5)" fg:x="134" fg:w="1"/><text x="93.3056%" y="479.50"></text></g><g><title>`0x7FFA23F12EA0 (1 samples, 0.69%)</title><rect x="93.0556%" y="453" width="0.6944%" height="15" fill="rgb(233,42,35)" fg:x="134" fg:w="1"/><text x="93.3056%" y="463.50"></text></g><g><title>`0x7FFA23F130C3 (1 samples, 0.69%)</title><rect x="93.0556%" y="437" width="0.6944%" height="15" fill="rgb(231,13,6)" fg:x="134" fg:w="1"/><text x="93.3056%" y="447.50"></text></g><g><title>`0x7FFA23EF90B6 (1 samples, 0.69%)</title><rect x="93.0556%" y="421" width="0.6944%" height="15" fill="rgb(207,181,40)" fg:x="134" fg:w="1"/><text x="93.3056%" y="431.50"></text></g><g><title>`0x7FFA217D9850 (1 samples, 0.69%)</title><rect x="93.7500%" y="453" width="0.6944%" height="15" fill="rgb(254,173,49)" fg:x="135" fg:w="1"/><text x="94.0000%" y="463.50"></text></g><g><title>`0x7FFA217DB752 (1 samples, 0.69%)</title><rect x="93.7500%" y="437" width="0.6944%" height="15" fill="rgb(221,1,38)" fg:x="135" fg:w="1"/><text x="94.0000%" y="447.50"></text></g><g><title>`0x7FFA217CABF6 (1 samples, 0.69%)</title><rect x="93.7500%" y="421" width="0.6944%" height="15" fill="rgb(206,124,46)" fg:x="135" fg:w="1"/><text x="94.0000%" y="431.50"></text></g><g><title>`0x7FFA23F5E251 (1 samples, 0.69%)</title><rect x="93.7500%" y="405" width="0.6944%" height="15" fill="rgb(249,21,11)" fg:x="135" fg:w="1"/><text x="94.0000%" y="415.50"></text></g><g><title>`0x7FFA23F5E2C8 (1 samples, 0.69%)</title><rect x="93.7500%" y="389" width="0.6944%" height="15" fill="rgb(222,201,40)" fg:x="135" fg:w="1"/><text x="94.0000%" y="399.50"></text></g><g><title>`0x7FFA23F640B1 (1 samples, 0.69%)</title><rect x="93.7500%" y="373" width="0.6944%" height="15" fill="rgb(235,61,29)" fg:x="135" fg:w="1"/><text x="94.0000%" y="383.50"></text></g><g><title>`0x7FFA217D954D (2 samples, 1.39%)</title><rect x="93.7500%" y="469" width="1.3889%" height="15" fill="rgb(219,207,3)" fg:x="135" fg:w="2"/><text x="94.0000%" y="479.50"></text></g><g><title>`0x7FFA217D9AE2 (1 samples, 0.69%)</title><rect x="94.4444%" y="453" width="0.6944%" height="15" fill="rgb(222,56,46)" fg:x="136" fg:w="1"/><text x="94.6944%" y="463.50"></text></g><g><title>`0x7FFA217DA9C0 (1 samples, 0.69%)</title><rect x="94.4444%" y="437" width="0.6944%" height="15" fill="rgb(239,76,54)" fg:x="136" fg:w="1"/><text x="94.6944%" y="447.50"></text></g><g><title>`0x7FFA23FA37CE (8 samples, 5.56%)</title><rect x="90.2778%" y="613" width="5.5556%" height="15" fill="rgb(231,124,27)" fg:x="130" fg:w="8"/><text x="90.5278%" y="623.50">`0x7FFA..</text></g><g><title>`0x7FFA23EE6AF4 (8 samples, 5.56%)</title><rect x="90.2778%" y="597" width="5.5556%" height="15" fill="rgb(249,195,6)" fg:x="130" fg:w="8"/><text x="90.5278%" y="607.50">`0x7FFA..</text></g><g><title>`0x7FFA23EE73E4 (8 samples, 5.56%)</title><rect x="90.2778%" y="581" width="5.5556%" height="15" fill="rgb(237,174,47)" fg:x="130" fg:w="8"/><text x="90.5278%" y="591.50">`0x7FFA..</text></g><g><title>`0x7FFA23EEFBAE (4 samples, 2.78%)</title><rect x="93.0556%" y="565" width="2.7778%" height="15" fill="rgb(206,201,31)" fg:x="134" fg:w="4"/><text x="93.3056%" y="575.50">`0..</text></g><g><title>`0x7FFA23F0D947 (4 samples, 2.78%)</title><rect x="93.0556%" y="549" width="2.7778%" height="15" fill="rgb(231,57,52)" fg:x="134" fg:w="4"/><text x="93.3056%" y="559.50">`0..</text></g><g><title>`0x7FFA23F3D110 (3 samples, 2.08%)</title><rect x="93.7500%" y="533" width="2.0833%" height="15" fill="rgb(248,177,22)" fg:x="135" fg:w="3"/><text x="94.0000%" y="543.50">`..</text></g><g><title>`0x7FFA23F3D08A (3 samples, 2.08%)</title><rect x="93.7500%" y="517" width="2.0833%" height="15" fill="rgb(215,211,37)" fg:x="135" fg:w="3"/><text x="94.0000%" y="527.50">`..</text></g><g><title>`0x7FFA23F3D2F7 (3 samples, 2.08%)</title><rect x="93.7500%" y="501" width="2.0833%" height="15" fill="rgb(241,128,51)" fg:x="135" fg:w="3"/><text x="94.0000%" y="511.50">`..</text></g><g><title>`0x7FFA23EE9A1D (3 samples, 2.08%)</title><rect x="93.7500%" y="485" width="2.0833%" height="15" fill="rgb(227,165,31)" fg:x="135" fg:w="3"/><text x="94.0000%" y="495.50">`..</text></g><g><title>`0x7FFA217D957E (1 samples, 0.69%)</title><rect x="95.1389%" y="469" width="0.6944%" height="15" fill="rgb(228,167,24)" fg:x="137" fg:w="1"/><text x="95.3889%" y="479.50"></text></g><g><title>`0x7FFA21826567 (1 samples, 0.69%)</title><rect x="95.1389%" y="453" width="0.6944%" height="15" fill="rgb(228,143,12)" fg:x="137" fg:w="1"/><text x="95.3889%" y="463.50"></text></g><g><title>`0x7FFA21842DCE (1 samples, 0.69%)</title><rect x="95.1389%" y="437" width="0.6944%" height="15" fill="rgb(249,149,8)" fg:x="137" fg:w="1"/><text x="95.3889%" y="447.50"></text></g><g><title>`0x7FFA21828C05 (1 samples, 0.69%)</title><rect x="95.1389%" y="421" width="0.6944%" height="15" fill="rgb(243,35,44)" fg:x="137" fg:w="1"/><text x="95.3889%" y="431.50"></text></g><g><title>`0x7FFA21835363 (1 samples, 0.69%)</title><rect x="95.1389%" y="405" width="0.6944%" height="15" fill="rgb(246,89,9)" fg:x="137" fg:w="1"/><text x="95.3889%" y="415.50"></text></g><g><title>`0x7FFA218401EB (1 samples, 0.69%)</title><rect x="95.1389%" y="389" width="0.6944%" height="15" fill="rgb(233,213,13)" fg:x="137" fg:w="1"/><text x="95.3889%" y="399.50"></text></g><g><title>`0x7FFA21838445 (1 samples, 0.69%)</title><rect x="95.1389%" y="373" width="0.6944%" height="15" fill="rgb(233,141,41)" fg:x="137" fg:w="1"/><text x="95.3889%" y="383.50"></text></g><g><title>`0x7FFA21879647 (1 samples, 0.69%)</title><rect x="95.1389%" y="357" width="0.6944%" height="15" fill="rgb(239,167,4)" fg:x="137" fg:w="1"/><text x="95.3889%" y="367.50"></text></g><g><title>`0x7FFA2182504E (1 samples, 0.69%)</title><rect x="95.1389%" y="341" width="0.6944%" height="15" fill="rgb(209,217,16)" fg:x="137" fg:w="1"/><text x="95.3889%" y="351.50"></text></g><g><title>`0x7FFA21823675 (1 samples, 0.69%)</title><rect x="95.1389%" y="325" width="0.6944%" height="15" fill="rgb(219,88,35)" fg:x="137" fg:w="1"/><text x="95.3889%" y="335.50"></text></g><g><title>`0x7FFA218236E1 (1 samples, 0.69%)</title><rect x="95.1389%" y="309" width="0.6944%" height="15" fill="rgb(220,193,23)" fg:x="137" fg:w="1"/><text x="95.3889%" y="319.50"></text></g><g><title>`0x7FFA2187399A (1 samples, 0.69%)</title><rect x="95.1389%" y="293" width="0.6944%" height="15" fill="rgb(230,90,52)" fg:x="137" fg:w="1"/><text x="95.3889%" y="303.50"></text></g><g><title>`0x7FFA23F70164 (1 samples, 0.69%)</title><rect x="95.1389%" y="277" width="0.6944%" height="15" fill="rgb(252,106,19)" fg:x="137" fg:w="1"/><text x="95.3889%" y="287.50"></text></g><g><title>`0x7FFA23FA389D (1 samples, 0.69%)</title><rect x="95.8333%" y="613" width="0.6944%" height="15" fill="rgb(206,74,20)" fg:x="138" fg:w="1"/><text x="96.0833%" y="623.50"></text></g><g><title>`0x7FFA23EE6FE3 (1 samples, 0.69%)</title><rect x="95.8333%" y="597" width="0.6944%" height="15" fill="rgb(230,138,44)" fg:x="138" fg:w="1"/><text x="96.0833%" y="607.50"></text></g><g><title>`0x7FFA23EE968B (1 samples, 0.69%)</title><rect x="95.8333%" y="581" width="0.6944%" height="15" fill="rgb(235,182,43)" fg:x="138" fg:w="1"/><text x="96.0833%" y="591.50"></text></g><g><title>`0x7FFA23EE88A8 (1 samples, 0.69%)</title><rect x="96.5278%" y="581" width="0.6944%" height="15" fill="rgb(242,16,51)" fg:x="139" fg:w="1"/><text x="96.7778%" y="591.50"></text></g><g><title>`0x7FFA23EE4479 (1 samples, 0.69%)</title><rect x="96.5278%" y="565" width="0.6944%" height="15" fill="rgb(248,9,4)" fg:x="139" fg:w="1"/><text x="96.7778%" y="575.50"></text></g><g><title>`0x7FFA23EE4C14 (1 samples, 0.69%)</title><rect x="96.5278%" y="549" width="0.6944%" height="15" fill="rgb(210,31,22)" fg:x="139" fg:w="1"/><text x="96.7778%" y="559.50"></text></g><g><title>`0x7FFA23EE7B29 (1 samples, 0.69%)</title><rect x="96.5278%" y="533" width="0.6944%" height="15" fill="rgb(239,54,39)" fg:x="139" fg:w="1"/><text x="96.7778%" y="543.50"></text></g><g><title>`0x7FFA23EE7CD0 (1 samples, 0.69%)</title><rect x="96.5278%" y="517" width="0.6944%" height="15" fill="rgb(230,99,41)" fg:x="139" fg:w="1"/><text x="96.7778%" y="527.50"></text></g><g><title>`0x7FFA23FA3B6D (2 samples, 1.39%)</title><rect x="96.5278%" y="613" width="1.3889%" height="15" fill="rgb(253,106,12)" fg:x="139" fg:w="2"/><text x="96.7778%" y="623.50"></text></g><g><title>`0x7FFA23EE7B29 (2 samples, 1.39%)</title><rect x="96.5278%" y="597" width="1.3889%" height="15" fill="rgb(213,46,41)" fg:x="139" fg:w="2"/><text x="96.7778%" y="607.50"></text></g><g><title>`0x7FFA23EE8948 (1 samples, 0.69%)</title><rect x="97.2222%" y="581" width="0.6944%" height="15" fill="rgb(215,133,35)" fg:x="140" fg:w="1"/><text x="97.4722%" y="591.50"></text></g><g><title>`0x7FFA23EDF49F (1 samples, 0.69%)</title><rect x="97.2222%" y="565" width="0.6944%" height="15" fill="rgb(213,28,5)" fg:x="140" fg:w="1"/><text x="97.4722%" y="575.50"></text></g><g><title>`0x7FFA23EE2A66 (1 samples, 0.69%)</title><rect x="97.2222%" y="549" width="0.6944%" height="15" fill="rgb(215,77,49)" fg:x="140" fg:w="1"/><text x="97.4722%" y="559.50"></text></g><g><title>`0x7FFA23EE2BD9 (1 samples, 0.69%)</title><rect x="97.2222%" y="533" width="0.6944%" height="15" fill="rgb(248,100,22)" fg:x="140" fg:w="1"/><text x="97.4722%" y="543.50"></text></g><g><title>`0x7FFA23F70304 (1 samples, 0.69%)</title><rect x="97.2222%" y="517" width="0.6944%" height="15" fill="rgb(208,67,9)" fg:x="140" fg:w="1"/><text x="97.4722%" y="527.50"></text></g><g><title>`0x7FFA23FA3C64 (1 samples, 0.69%)</title><rect x="97.9167%" y="613" width="0.6944%" height="15" fill="rgb(219,133,21)" fg:x="141" fg:w="1"/><text x="98.1667%" y="623.50"></text></g><g><title>`0x7FFA23F52E02 (1 samples, 0.69%)</title><rect x="97.9167%" y="597" width="0.6944%" height="15" fill="rgb(246,46,29)" fg:x="141" fg:w="1"/><text x="98.1667%" y="607.50"></text></g><g><title>`0x7FFA220ACA60 (1 samples, 0.69%)</title><rect x="97.9167%" y="581" width="0.6944%" height="15" fill="rgb(246,185,52)" fg:x="141" fg:w="1"/><text x="98.1667%" y="591.50"></text></g><g><title>`0x7FFA2169710E (1 samples, 0.69%)</title><rect x="98.6111%" y="485" width="0.6944%" height="15" fill="rgb(252,136,11)" fg:x="142" fg:w="1"/><text x="98.8611%" y="495.50"></text></g><g><title>`0x7FFA21697214 (1 samples, 0.69%)</title><rect x="98.6111%" y="469" width="0.6944%" height="15" fill="rgb(219,138,53)" fg:x="142" fg:w="1"/><text x="98.8611%" y="479.50"></text></g><g><title>`0x7FFA216976CC (1 samples, 0.69%)</title><rect x="98.6111%" y="453" width="0.6944%" height="15" fill="rgb(211,51,23)" fg:x="142" fg:w="1"/><text x="98.8611%" y="463.50"></text></g><g><title>`0x7FFA21697980 (1 samples, 0.69%)</title><rect x="98.6111%" y="437" width="0.6944%" height="15" fill="rgb(247,221,28)" fg:x="142" fg:w="1"/><text x="98.8611%" y="447.50"></text></g><g><title>`0x7FFA21697B11 (1 samples, 0.69%)</title><rect x="98.6111%" y="421" width="0.6944%" height="15" fill="rgb(251,222,45)" fg:x="142" fg:w="1"/><text x="98.8611%" y="431.50"></text></g><g><title>`0x7FFA21697F9C (1 samples, 0.69%)</title><rect x="98.6111%" y="405" width="0.6944%" height="15" fill="rgb(217,162,53)" fg:x="142" fg:w="1"/><text x="98.8611%" y="415.50"></text></g><g><title>`0x7FFA21698137 (1 samples, 0.69%)</title><rect x="98.6111%" y="389" width="0.6944%" height="15" fill="rgb(229,93,14)" fg:x="142" fg:w="1"/><text x="98.8611%" y="399.50"></text></g><g><title>`0x7FFA217A577A (1 samples, 0.69%)</title><rect x="98.6111%" y="373" width="0.6944%" height="15" fill="rgb(209,67,49)" fg:x="142" fg:w="1"/><text x="98.8611%" y="383.50"></text></g><g><title>all (144 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(213,87,29)" fg:x="0" fg:w="144"/><text x="0.2500%" y="687.50"></text></g><g><title>`0x7FFA23F45C1E (17 samples, 11.81%)</title><rect x="88.1944%" y="661" width="11.8056%" height="15" fill="rgb(205,151,52)" fg:x="127" fg:w="17"/><text x="88.4444%" y="671.50">`0x7FFA23F45C1E</text></g><g><title>`0x7FFA23F45C73 (16 samples, 11.11%)</title><rect x="88.8889%" y="645" width="11.1111%" height="15" fill="rgb(253,215,39)" fg:x="128" fg:w="16"/><text x="89.1389%" y="655.50">`0x7FFA23F45C73</text></g><g><title>`0x7FFA23F45DEB (16 samples, 11.11%)</title><rect x="88.8889%" y="629" width="11.1111%" height="15" fill="rgb(221,220,41)" fg:x="128" fg:w="16"/><text x="89.1389%" y="639.50">`0x7FFA23F45DEB</text></g><g><title>`0x7FFA23FA3CB2 (2 samples, 1.39%)</title><rect x="98.6111%" y="613" width="1.3889%" height="15" fill="rgb(218,133,21)" fg:x="142" fg:w="2"/><text x="98.8611%" y="623.50"></text></g><g><title>`0x7FFA23F3D110 (2 samples, 1.39%)</title><rect x="98.6111%" y="597" width="1.3889%" height="15" fill="rgb(221,193,43)" fg:x="142" fg:w="2"/><text x="98.8611%" y="607.50"></text></g><g><title>`0x7FFA23F3D110 (2 samples, 1.39%)</title><rect x="98.6111%" y="581" width="1.3889%" height="15" fill="rgb(240,128,52)" fg:x="142" fg:w="2"/><text x="98.8611%" y="591.50"></text></g><g><title>`0x7FFA23F3D08A (2 samples, 1.39%)</title><rect x="98.6111%" y="565" width="1.3889%" height="15" fill="rgb(253,114,12)" fg:x="142" fg:w="2"/><text x="98.8611%" y="575.50"></text></g><g><title>`0x7FFA23F3D2F7 (2 samples, 1.39%)</title><rect x="98.6111%" y="549" width="1.3889%" height="15" fill="rgb(215,223,47)" fg:x="142" fg:w="2"/><text x="98.8611%" y="559.50"></text></g><g><title>`0x7FFA23EE9A1D (2 samples, 1.39%)</title><rect x="98.6111%" y="533" width="1.3889%" height="15" fill="rgb(248,225,23)" fg:x="142" fg:w="2"/><text x="98.8611%" y="543.50"></text></g><g><title>`0x7FFA216A6216 (2 samples, 1.39%)</title><rect x="98.6111%" y="517" width="1.3889%" height="15" fill="rgb(250,108,0)" fg:x="142" fg:w="2"/><text x="98.8611%" y="527.50"></text></g><g><title>`0x7FFA216A7730 (2 samples, 1.39%)</title><rect x="98.6111%" y="501" width="1.3889%" height="15" fill="rgb(228,208,7)" fg:x="142" fg:w="2"/><text x="98.8611%" y="511.50"></text></g><g><title>`0x7FFA216AE37F (1 samples, 0.69%)</title><rect x="99.3056%" y="485" width="0.6944%" height="15" fill="rgb(244,45,10)" fg:x="143" fg:w="1"/><text x="99.5556%" y="495.50"></text></g><g><title>`0x7FFA216B0AAE (1 samples, 0.69%)</title><rect x="99.3056%" y="469" width="0.6944%" height="15" fill="rgb(207,125,25)" fg:x="143" fg:w="1"/><text x="99.5556%" y="479.50"></text></g><g><title>`0x7FFA23F101A1 (1 samples, 0.69%)</title><rect x="99.3056%" y="453" width="0.6944%" height="15" fill="rgb(210,195,18)" fg:x="143" fg:w="1"/><text x="99.5556%" y="463.50"></text></g></svg></svg>